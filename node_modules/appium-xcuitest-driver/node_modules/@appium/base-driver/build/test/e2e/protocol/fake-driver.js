"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FakeDriver = void 0;

require("source-map-support/register");

var _lib = require("../../../lib");

var _constants = require("../../../lib/constants");

var _support = require("@appium/support");

class FakeDriver extends _lib.BaseDriver {
  static newMethodMap = {
    '/session/:sessionId/noproxy': {
      GET: {
        command: 'notProxiedCommand',
        neverProxy: true
      }
    }
  };

  constructor() {
    super();
    this.protocol = _constants.PROTOCOLS.MJSONWP;
    this.sessionId = null;
    this.jwpProxyActive = false;
  }

  sessionExists(sessionId) {
    if (!sessionId) {
      return false;
    }

    return sessionId === this.sessionId;
  }

  driverForSession() {
    return this;
  }

  async createSession(desiredCapabilities, requiredCapabilities, capabilities) {
    this.sessionId = `fakeSession_${_support.util.uuidV4()}`;
    return [this.sessionId, capabilities];
  }

  async executeCommand(cmd, ...args) {
    if (!this[cmd]) {
      throw new _lib.errors.NotYetImplementedError();
    }

    if (cmd === 'createSession') {
      this.protocol = (0, _lib.determineProtocol)(args);
    }

    return await this[cmd](...args);
  }

  async deleteSession() {
    this.jwpProxyActive = false;
    this.sessionId = null;
  }

  async getStatus() {
    return "I'm fine";
  }

  async setUrl(url) {
    return `Navigated to: ${url}`;
  }

  async getUrl() {
    return 'http://foobar.com';
  }

  async back(sessionId) {
    return sessionId;
  }

  async forward() {}

  async refresh() {
    throw new Error('Too Fresh!');
  }

  async getSession() {
    throw new _lib.errors.NoSuchDriverError();
  }

  async click(elementId, sessionId) {
    return [elementId, sessionId];
  }

  async implicitWait(ms) {
    return ms;
  }

  async clickCurrent(button) {
    return button;
  }

  async setNetworkConnection(type) {
    return type;
  }

  async moveTo(element, xOffset, yOffset) {
    return [element, xOffset, yOffset];
  }

  async getText() {
    return '';
  }

  async getAttribute(attr, elementId, sessionId) {
    return [attr, elementId, sessionId];
  }

  async setValue(value, elementId) {
    return [value, elementId];
  }

  async performTouch(...args) {
    return args;
  }

  async setFrame(frameId) {
    return frameId;
  }

  async removeApp(app) {
    return app;
  }

  async receiveAsyncResponse() {
    return {
      status: 13,
      value: 'Mishandled Driver Error'
    };
  }

  proxyActive() {
    return false;
  }

  getProxyAvoidList() {
    return [];
  }

  canProxy() {
    return false;
  }

  async notProxiedCommand() {
    return 'This was not proxied';
  }

}

exports.FakeDriver = FakeDriver;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJGYWtlRHJpdmVyIiwiQmFzZURyaXZlciIsIm5ld01ldGhvZE1hcCIsIkdFVCIsImNvbW1hbmQiLCJuZXZlclByb3h5IiwiY29uc3RydWN0b3IiLCJwcm90b2NvbCIsIlBST1RPQ09MUyIsIk1KU09OV1AiLCJzZXNzaW9uSWQiLCJqd3BQcm94eUFjdGl2ZSIsInNlc3Npb25FeGlzdHMiLCJkcml2ZXJGb3JTZXNzaW9uIiwiY3JlYXRlU2Vzc2lvbiIsImRlc2lyZWRDYXBhYmlsaXRpZXMiLCJyZXF1aXJlZENhcGFiaWxpdGllcyIsImNhcGFiaWxpdGllcyIsInV0aWwiLCJ1dWlkVjQiLCJleGVjdXRlQ29tbWFuZCIsImNtZCIsImFyZ3MiLCJlcnJvcnMiLCJOb3RZZXRJbXBsZW1lbnRlZEVycm9yIiwiZGV0ZXJtaW5lUHJvdG9jb2wiLCJkZWxldGVTZXNzaW9uIiwiZ2V0U3RhdHVzIiwic2V0VXJsIiwidXJsIiwiZ2V0VXJsIiwiYmFjayIsImZvcndhcmQiLCJyZWZyZXNoIiwiRXJyb3IiLCJnZXRTZXNzaW9uIiwiTm9TdWNoRHJpdmVyRXJyb3IiLCJjbGljayIsImVsZW1lbnRJZCIsImltcGxpY2l0V2FpdCIsIm1zIiwiY2xpY2tDdXJyZW50IiwiYnV0dG9uIiwic2V0TmV0d29ya0Nvbm5lY3Rpb24iLCJ0eXBlIiwibW92ZVRvIiwiZWxlbWVudCIsInhPZmZzZXQiLCJ5T2Zmc2V0IiwiZ2V0VGV4dCIsImdldEF0dHJpYnV0ZSIsImF0dHIiLCJzZXRWYWx1ZSIsInZhbHVlIiwicGVyZm9ybVRvdWNoIiwic2V0RnJhbWUiLCJmcmFtZUlkIiwicmVtb3ZlQXBwIiwiYXBwIiwicmVjZWl2ZUFzeW5jUmVzcG9uc2UiLCJzdGF0dXMiLCJwcm94eUFjdGl2ZSIsImdldFByb3h5QXZvaWRMaXN0IiwiY2FuUHJveHkiLCJub3RQcm94aWVkQ29tbWFuZCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Rlc3QvZTJlL3Byb3RvY29sL2Zha2UtZHJpdmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIHJlcXVpcmUtYXdhaXQgKi9cbmltcG9ydCB7ZXJyb3JzLCBCYXNlRHJpdmVyLCBkZXRlcm1pbmVQcm90b2NvbH0gZnJvbSAnLi4vLi4vLi4vbGliJztcbmltcG9ydCB7UFJPVE9DT0xTfSBmcm9tICcuLi8uLi8uLi9saWIvY29uc3RhbnRzJztcbmltcG9ydCB7dXRpbH0gZnJvbSAnQGFwcGl1bS9zdXBwb3J0JztcblxuY2xhc3MgRmFrZURyaXZlciBleHRlbmRzIEJhc2VEcml2ZXIge1xuICBzdGF0aWMgbmV3TWV0aG9kTWFwID0ge1xuICAgICcvc2Vzc2lvbi86c2Vzc2lvbklkL25vcHJveHknOiB7XG4gICAgICBHRVQ6IHtjb21tYW5kOiAnbm90UHJveGllZENvbW1hbmQnLCBuZXZlclByb3h5OiB0cnVlfSxcbiAgICB9LFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5wcm90b2NvbCA9IFBST1RPQ09MUy5NSlNPTldQO1xuICAgIHRoaXMuc2Vzc2lvbklkID0gbnVsbDtcbiAgICB0aGlzLmp3cFByb3h5QWN0aXZlID0gZmFsc2U7XG4gIH1cblxuICBzZXNzaW9uRXhpc3RzKHNlc3Npb25JZCkge1xuICAgIGlmICghc2Vzc2lvbklkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBzZXNzaW9uSWQgPT09IHRoaXMuc2Vzc2lvbklkO1xuICB9XG5cbiAgZHJpdmVyRm9yU2Vzc2lvbigvKnNlc3Npb25JZCovKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBhc3luYyBjcmVhdGVTZXNzaW9uKGRlc2lyZWRDYXBhYmlsaXRpZXMsIHJlcXVpcmVkQ2FwYWJpbGl0aWVzLCBjYXBhYmlsaXRpZXMpIHtcbiAgICAvLyBVc2UgYSBjb3VudGVyIHRvIG1ha2Ugc3VyZSBlYWNoIHNlc3Npb24gaGFzIGEgdW5pcXVlIGlkXG4gICAgdGhpcy5zZXNzaW9uSWQgPSBgZmFrZVNlc3Npb25fJHt1dGlsLnV1aWRWNCgpfWA7XG4gICAgcmV0dXJuIFt0aGlzLnNlc3Npb25JZCwgY2FwYWJpbGl0aWVzXTtcbiAgfVxuXG4gIGFzeW5jIGV4ZWN1dGVDb21tYW5kKGNtZCwgLi4uYXJncykge1xuICAgIGlmICghdGhpc1tjbWRdKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLk5vdFlldEltcGxlbWVudGVkRXJyb3IoKTtcbiAgICB9XG4gICAgaWYgKGNtZCA9PT0gJ2NyZWF0ZVNlc3Npb24nKSB7XG4gICAgICB0aGlzLnByb3RvY29sID0gZGV0ZXJtaW5lUHJvdG9jb2woYXJncyk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCB0aGlzW2NtZF0oLi4uYXJncyk7XG4gIH1cblxuICBhc3luYyBkZWxldGVTZXNzaW9uKCkge1xuICAgIHRoaXMuandwUHJveHlBY3RpdmUgPSBmYWxzZTtcbiAgICB0aGlzLnNlc3Npb25JZCA9IG51bGw7XG4gIH1cblxuICBhc3luYyBnZXRTdGF0dXMoKSB7XG4gICAgcmV0dXJuIFwiSSdtIGZpbmVcIjtcbiAgfVxuXG4gIGFzeW5jIHNldFVybCh1cmwpIHtcbiAgICByZXR1cm4gYE5hdmlnYXRlZCB0bzogJHt1cmx9YDtcbiAgfVxuXG4gIGFzeW5jIGdldFVybCgpIHtcbiAgICByZXR1cm4gJ2h0dHA6Ly9mb29iYXIuY29tJztcbiAgfVxuXG4gIGFzeW5jIGJhY2soc2Vzc2lvbklkKSB7XG4gICAgcmV0dXJuIHNlc3Npb25JZDtcbiAgfVxuXG4gIGFzeW5jIGZvcndhcmQoKSB7fVxuXG4gIGFzeW5jIHJlZnJlc2goKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUb28gRnJlc2ghJyk7XG4gIH1cblxuICBhc3luYyBnZXRTZXNzaW9uKCkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuTm9TdWNoRHJpdmVyRXJyb3IoKTtcbiAgfVxuXG4gIGFzeW5jIGNsaWNrKGVsZW1lbnRJZCwgc2Vzc2lvbklkKSB7XG4gICAgcmV0dXJuIFtlbGVtZW50SWQsIHNlc3Npb25JZF07XG4gIH1cblxuICBhc3luYyBpbXBsaWNpdFdhaXQobXMpIHtcbiAgICByZXR1cm4gbXM7XG4gIH1cblxuICBhc3luYyBjbGlja0N1cnJlbnQoYnV0dG9uKSB7XG4gICAgcmV0dXJuIGJ1dHRvbjtcbiAgfVxuXG4gIGFzeW5jIHNldE5ldHdvcmtDb25uZWN0aW9uKHR5cGUpIHtcbiAgICByZXR1cm4gdHlwZTtcbiAgfVxuXG4gIGFzeW5jIG1vdmVUbyhlbGVtZW50LCB4T2Zmc2V0LCB5T2Zmc2V0KSB7XG4gICAgcmV0dXJuIFtlbGVtZW50LCB4T2Zmc2V0LCB5T2Zmc2V0XTtcbiAgfVxuXG4gIGFzeW5jIGdldFRleHQoKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgYXN5bmMgZ2V0QXR0cmlidXRlKGF0dHIsIGVsZW1lbnRJZCwgc2Vzc2lvbklkKSB7XG4gICAgcmV0dXJuIFthdHRyLCBlbGVtZW50SWQsIHNlc3Npb25JZF07XG4gIH1cblxuICBhc3luYyBzZXRWYWx1ZSh2YWx1ZSwgZWxlbWVudElkKSB7XG4gICAgcmV0dXJuIFt2YWx1ZSwgZWxlbWVudElkXTtcbiAgfVxuXG4gIGFzeW5jIHBlcmZvcm1Ub3VjaCguLi5hcmdzKSB7XG4gICAgcmV0dXJuIGFyZ3M7XG4gIH1cblxuICBhc3luYyBzZXRGcmFtZShmcmFtZUlkKSB7XG4gICAgcmV0dXJuIGZyYW1lSWQ7XG4gIH1cblxuICBhc3luYyByZW1vdmVBcHAoYXBwKSB7XG4gICAgcmV0dXJuIGFwcDtcbiAgfVxuXG4gIGFzeW5jIHJlY2VpdmVBc3luY1Jlc3BvbnNlKCkge1xuICAgIC8vIHRoaXMgaXMgaGVyZSB0byB0ZXN0IGEgZmFpbGluZyBjb21tYW5kIHRoYXQgZG9lcyBub3QgdGhyb3cgYW4gZXJyb3JcbiAgICByZXR1cm4ge3N0YXR1czogMTMsIHZhbHVlOiAnTWlzaGFuZGxlZCBEcml2ZXIgRXJyb3InfTtcbiAgfVxuXG4gIHByb3h5QWN0aXZlKC8qc2Vzc2lvbklkKi8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBnZXRQcm94eUF2b2lkTGlzdCgvKnNlc3Npb25JZCovKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgY2FuUHJveHkoLypzZXNzaW9uSWQqLykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGFzeW5jIG5vdFByb3hpZWRDb21tYW5kKCkge1xuICAgIHJldHVybiAnVGhpcyB3YXMgbm90IHByb3hpZWQnO1xuICB9XG59XG5cbmV4cG9ydCB7RmFrZURyaXZlcn07XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUNBOztBQUNBOztBQUNBOztBQUVBLE1BQU1BLFVBQU4sU0FBeUJDLGVBQXpCLENBQW9DO0VBQ2YsT0FBWkMsWUFBWSxHQUFHO0lBQ3BCLCtCQUErQjtNQUM3QkMsR0FBRyxFQUFFO1FBQUNDLE9BQU8sRUFBRSxtQkFBVjtRQUErQkMsVUFBVSxFQUFFO01BQTNDO0lBRHdCO0VBRFgsQ0FBSDs7RUFNbkJDLFdBQVcsR0FBRztJQUNaO0lBQ0EsS0FBS0MsUUFBTCxHQUFnQkMsb0JBQUEsQ0FBVUMsT0FBMUI7SUFDQSxLQUFLQyxTQUFMLEdBQWlCLElBQWpCO0lBQ0EsS0FBS0MsY0FBTCxHQUFzQixLQUF0QjtFQUNEOztFQUVEQyxhQUFhLENBQUNGLFNBQUQsRUFBWTtJQUN2QixJQUFJLENBQUNBLFNBQUwsRUFBZ0I7TUFDZCxPQUFPLEtBQVA7SUFDRDs7SUFDRCxPQUFPQSxTQUFTLEtBQUssS0FBS0EsU0FBMUI7RUFDRDs7RUFFREcsZ0JBQWdCLEdBQWdCO0lBQzlCLE9BQU8sSUFBUDtFQUNEOztFQUVrQixNQUFiQyxhQUFhLENBQUNDLG1CQUFELEVBQXNCQyxvQkFBdEIsRUFBNENDLFlBQTVDLEVBQTBEO0lBRTNFLEtBQUtQLFNBQUwsR0FBa0IsZUFBY1EsYUFBQSxDQUFLQyxNQUFMLEVBQWMsRUFBOUM7SUFDQSxPQUFPLENBQUMsS0FBS1QsU0FBTixFQUFpQk8sWUFBakIsQ0FBUDtFQUNEOztFQUVtQixNQUFkRyxjQUFjLENBQUNDLEdBQUQsRUFBTSxHQUFHQyxJQUFULEVB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