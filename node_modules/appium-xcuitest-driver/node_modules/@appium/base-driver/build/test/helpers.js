"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAppiumURL = exports.TEST_HOST = exports.METHODS = void 0;
exports.getTestPort = getTestPort;

require("source-map-support/register");

var _getPort = _interopRequireDefault(require("get-port"));

var _lodash = require("lodash");

const TEST_HOST = '127.0.0.1';
exports.TEST_HOST = TEST_HOST;
const METHODS = {
  POST: 'POST',
  DELETE: 'DELETE'
};
exports.METHODS = METHODS;
let testPort;

async function getTestPort(force = false) {
  if (force || !testPort) {
    let port = await (0, _getPort.default)();

    if (!testPort) {
      testPort = port;
    }

    return port;
  }

  return testPort;
}

const createAppiumURL = (0, _lodash.curry)((address, port, session, pathname) => {
  if (!/^https?:\/\//.test(address)) {
    address = `http://${address}`;
  }

  let path = session ? `session/${session}` : '';

  if (pathname) {
    path = `${path}/${pathname}`;
  }

  let url = new URL(path, `${address}:${port}`);
  return url.href;
}, 4);
exports.createAppiumURL = createAppiumURL;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJURVNUX0hPU1QiLCJNRVRIT0RTIiwiUE9TVCIsIkRFTEVURSIsInRlc3RQb3J0IiwiZ2V0VGVzdFBvcnQiLCJmb3JjZSIsInBvcnQiLCJnZXRQb3J0IiwiY3JlYXRlQXBwaXVtVVJMIiwiY3VycnkiLCJhZGRyZXNzIiwic2Vzc2lvbiIsInBhdGhuYW1lIiwidGVzdCIsInBhdGgiLCJ1cmwiLCJVUkwiLCJocmVmIl0sInNvdXJjZXMiOlsiLi4vLi4vdGVzdC9oZWxwZXJzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnZXRQb3J0IGZyb20gJ2dldC1wb3J0JztcbmltcG9ydCB7Y3Vycnl9IGZyb20gJ2xvZGFzaCc7XG5cbmNvbnN0IFRFU1RfSE9TVCA9ICcxMjcuMC4wLjEnO1xuXG4vKipcbiAqIFNvbWUgSFRUUCBtZXRob2RzLCBmb3IgeW91ciBwbGVhc3VyZVxuICovXG5jb25zdCBNRVRIT0RTID0ge1xuICBQT1NUOiAnUE9TVCcsXG4gIERFTEVURTogJ0RFTEVURScsXG59O1xuXG5sZXQgdGVzdFBvcnQ7XG4vKipcbiAqIFJldHVybnMgYSBmcmVlIHBvcnQ7IG9uZSBwZXIgcHJvY2Vzc1xuICogQHBhcmFtIHtib29sZWFufSBbZm9yY2VdIC0gSWYgdHJ1ZSwgZG8gbm90IHJldXNlIHRoZSBwb3J0IChpZiBpdCBhbHJlYWR5IGV4aXN0cylcbiAqIEByZXR1cm5zIHtQcm9taXNlPG51bWJlcj59IGEgZnJlZSBwb3J0XG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdldFRlc3RQb3J0KGZvcmNlID0gZmFsc2UpIHtcbiAgaWYgKGZvcmNlIHx8ICF0ZXN0UG9ydCkge1xuICAgIGxldCBwb3J0ID0gYXdhaXQgZ2V0UG9ydCgpO1xuICAgIGlmICghdGVzdFBvcnQpIHtcbiAgICAgIHRlc3RQb3J0ID0gcG9ydDtcbiAgICB9XG4gICAgcmV0dXJuIHBvcnQ7XG4gIH1cbiAgcmV0dXJuIHRlc3RQb3J0O1xufVxuXG5jb25zdCBjcmVhdGVBcHBpdW1VUkwgPSBjdXJyeShcbiAgLyoqXG4gICAqIEJ1aWxkIGFuIEFwcGl1bSBVUkwgZnJvbSBjb21wb25lbnRzLlxuICAgKlxuICAgKiAqKkFsbCoqIHBhcmFtZXRlcnMgYXJlIHJlcXVpcmVkLiAgUHJvdmlkZSBhbiBlbXB0eSBzdHJpbmcgKGAnJ2ApIGlmIHlvdSBkb24ndCBuZWVkIG9uZS5cbiAgICogVG8gcmVhcnJhbmdlIGFyZ3VtZW50cyAoaWYgbmVlZGVkKSwgdXNlIHRoZSBwbGFjZWhvbGRlciAoYF9gKS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGFkZHJlc3MgLSBCYXNlIGFkZHJlc3MgKHcvIG9wdGlvbmFsIHByb3RvY29sKVxuICAgKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IHBvcnQgLSBQb3J0IG51bWJlclxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2Vzc2lvbiAtIFNlc3Npb24gSURcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGhuYW1lIC0gRXh0cmEgcGF0aFxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBOZXcgVVJMXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIGltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG4gICAqXG4gICAqIC8vIGh0dHA6Ly8xMjcuMC4wLjE6MzEzMzcvc2Vzc2lvblxuICAgKiBjcmVhdGVBcHBpdW1VUkwoJzEyNy4wLjAuMScsIDMxMzM3LCAnJywgJ3Nlc3Npb24nKVxuICAgKlxuICAgKiAvLyBodHRwOi8vMTI3LjAuMC4xOjMxMzM3L3Nlc3Npb24vYXNkZmdqa2xcbiAgICogY29uc3QgY3JlYXRlU2Vzc2lvblVSTCA9IGNyZWF0ZUFwcGl1bVVSTCgnMTI3LjAuMC4xJywgMzEzMzcsIF8sICdzZXNzaW9uJylcbiAgICogY3JlYXRlU2Vzc2lvblVSTCgnYXNkZmdqa2wnKVxuICAgKlxuICAgKiAvLyBodHRwOi8vMTI3LjAuMC4xOjMxMzM3L3Nlc3Npb24vYXNkZmdqa2wvYXBwaXVtL2V4ZWN1dGVcbiAgICogY29uc3QgY3JlYXRlVVJMV2l0aFBhdGggPSBjcmVhdGVBcHBpdW1VUkwoJzEyNy4wLjAuMScsIDMxMzM3LCAnYXNkZmdqa2wnKTtcbiAgICogY3JlYXRlVVJMV2l0aFBhdGgoJ2FwcGl1bS9leGVjdXRlJylcbiAgICovXG4gIChhZGRyZXNzLCBwb3J0LCBzZXNzaW9uLCBwYXRobmFtZSkgPT4ge1xuICAgIGlmICghL15odHRwcz86XFwvXFwvLy50ZXN0KGFkZHJlc3MpKSB7XG4gICAgICBhZGRyZXNzID0gYGh0dHA6Ly8ke2FkZHJlc3N9YDtcbiAgICB9XG4gICAgbGV0IHBhdGggPSBzZXNzaW9uID8gYHNlc3Npb24vJHtzZXNzaW9ufWAgOiAnJztcbiAgICBpZiAocGF0aG5hbWUpIHtcbiAgICAgIHBhdGggPSBgJHtwYXRofS8ke3BhdGhuYW1lfWA7XG4gICAgfVxuICAgIGxldCB1cmwgPSBuZXcgVVJMKHBhdGgsIGAke2FkZHJlc3N9OiR7cG9ydH1gKTtcbiAgICByZXR1cm4gdXJsLmhyZWY7XG4gIH0sXG4gIDRcbik7XG5cbmV4cG9ydCB7VEVTVF9IT1NULCBNRVRIT0RTLCBnZXRUZXN0UG9ydCwgY3JlYXRlQXBwaXVtVVJMfTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUEsTUFBTUEsU0FBUyxHQUFHLFdBQWxCOztBQUtBLE1BQU1DLE9BQU8sR0FBRztFQUNkQyxJQUFJLEVBQUUsTUFEUTtFQUVkQyxNQUFNLEVBQUU7QUFGTSxDQUFoQjs7QUFLQSxJQUFJQyxRQUFKOztBQU1BLGVBQWVDLFdBQWYsQ0FBMkJDLEtBQUssR0FBRyxLQUFuQyxFQUEwQztFQUN4QyxJQUFJQSxLQUFLLElBQUksQ0FBQ0YsUUFBZCxFQUF3QjtJQUN0QixJQUFJRyxJQUFJLEdBQUcsTUFBTSxJQUFBQyxnQkFBQSxHQUFqQjs7SUFDQSxJQUFJLENBQUNKLFFBQUwsRUFBZTtNQUNiQSxRQUFRLEdBQUdHLElBQVg7SUFDRDs7SUFDRCxPQUFPQSxJQUFQO0VBQ0Q7O0VBQ0QsT0FBT0gsUUFBUDtBQUNEOztBQUVELE1BQU1LLGVBQWUsR0FBRyxJQUFBQyxhQUFBLEVBMkJ0QixDQUFDQyxPQUFELEVBQVVKLElBQVYsRUFBZ0JLLE9BQWhCLEVBQXlCQyxRQUF6QixLQUFzQztFQUNwQyxJQUFJLENBQUMsZUFBZUMsSUFBZixDQUFvQkgsT0FBcEIsQ0FBTCxFQUFtQztJQUNqQ0EsT0FBTyxHQUFJLFVBQVNBLE9BQVEsRUFBNUI7RUFDRDs7RUFDRCxJQUFJSSxJQUFJLEdBQUdILE9BQU8sR0FBSSxXQUFVQSxPQUFRLEVBQXRCLEdBQTBCLEVBQTVDOztFQUNBLElBQUlDLFFBQUosRUFBYztJQUNaRSxJQUFJLEdBQUksR0FBRUEsSUFBSyxJQUFHRixRQUFTLEVBQTNCO0VBQ0Q7O0VBQ0QsSUFBSUcsR0FBRyxHQUFHLElBQUlDLEdBQUosQ0FBUUYsSUFBUixFQUFlLEdBQUVKLE9BQVEsSUFBR0osSUFBSyxFQUFqQyxDQUFWO0VBQ0EsT0FBT1MsR0FBRyxDQUFDRSxJQUFYO0FBQ0QsQ0FyQ3FCLEVBc0N0QixDQXRDc0IsQ0FBeEIifQ==