'use strict';

require("source-map-support/register");

const mocha = require('gulp-mocha');

const B = require('bluebird');

const globby = require('globby');

const debug = require('gulp-debug');

const gulpIf = require('gulp-if');

const log = require('fancy-log');

const utils = require('../utils');

const {
  isVerbose
} = utils;

const configure = function configure(gulp, opts, env) {
  const e2eTestFiles = utils.translatePaths([opts.e2eTest.files || opts.e2eTestFiles], env.fileAliases);
  gulp.task('e2e-test:run', async function e2eTestRun() {
    const mochaOpts = {
      reporter: utils.getTestReporter(opts),
      timeout: opts.testTimeout,
      require: opts.testRequire || [],
      exit: true,
      color: true,
      traceWarnings: opts.e2eTest.traceWarnings,
      traceDeprecation: opts.e2eTest.traceWarnings
    };
    process.env._TESTING = 1;

    const mochaCmd = function () {
      return new B(function runCmd(resolve, reject) {
        gulp.src(e2eTestFiles, {
          read: true,
          allowEmpty: true
        }).pipe(gulpIf(isVerbose(), debug())).pipe(mocha(mochaOpts)).on('error', function onError(err) {
          reject(err);
        }).once('_result', function onResult(...args) {
          resolve(...args);
        });
      });
    };

    try {
      const files = await globby(e2eTestFiles);

      if (!files.length) {
        log(`No e2e test files found using '${e2eTestFiles}'`);
        return;
      }

      await mochaCmd();
    } finally {
      if (opts.e2eTest.forceExit) {
        process.exit(0);
      }
    }
  });
  gulp.task('e2e-test', gulp.series(env.testDeps, 'e2e-test:run'));
};

module.exports = {
  configure
};require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL3Rhc2tzL2UyZS10ZXN0LmpzIiwibmFtZXMiOlsibW9jaGEiLCJyZXF1aXJlIiwiQiIsImdsb2JieSIsImRlYnVnIiwiZ3VscElmIiwibG9nIiwidXRpbHMiLCJpc1ZlcmJvc2UiLCJjb25maWd1cmUiLCJndWxwIiwib3B0cyIsImVudiIsImUyZVRlc3RGaWxlcyIsInRyYW5zbGF0ZVBhdGhzIiwiZTJlVGVzdCIsImZpbGVzIiwiZmlsZUFsaWFzZXMiLCJ0YXNrIiwiZTJlVGVzdFJ1biIsIm1vY2hhT3B0cyIsInJlcG9ydGVyIiwiZ2V0VGVzdFJlcG9ydGVyIiwidGltZW91dCIsInRlc3RUaW1lb3V0IiwidGVzdFJlcXVpcmUiLCJleGl0IiwiY29sb3IiLCJ0cmFjZVdhcm5pbmdzIiwidHJhY2VEZXByZWNhdGlvbiIsInByb2Nlc3MiLCJfVEVTVElORyIsIm1vY2hhQ21kIiwicnVuQ21kIiwicmVzb2x2ZSIsInJlamVjdCIsInNyYyIsInJlYWQiLCJhbGxvd0VtcHR5IiwicGlwZSIsIm9uIiwib25FcnJvciIsImVyciIsIm9uY2UiLCJvblJlc3VsdCIsImFyZ3MiLCJsZW5ndGgiLCJmb3JjZUV4aXQiLCJzZXJpZXMiLCJ0ZXN0RGVwcyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIiwic291cmNlcyI6WyJsaWIvdGFza3MvZTJlLXRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBtb2NoYSA9IHJlcXVpcmUoJ2d1bHAtbW9jaGEnKTtcbmNvbnN0IEIgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xuY29uc3QgZ2xvYmJ5ID0gcmVxdWlyZSgnZ2xvYmJ5Jyk7XG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoJ2d1bHAtZGVidWcnKTtcbmNvbnN0IGd1bHBJZiA9IHJlcXVpcmUoJ2d1bHAtaWYnKTtcbmNvbnN0IGxvZyA9IHJlcXVpcmUoJ2ZhbmN5LWxvZycpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5jb25zdCB7aXNWZXJib3NlfSA9IHV0aWxzO1xuXG5jb25zdCBjb25maWd1cmUgPSBmdW5jdGlvbiBjb25maWd1cmUoZ3VscCwgb3B0cywgZW52KSB7XG4gIGNvbnN0IGUyZVRlc3RGaWxlcyA9IHV0aWxzLnRyYW5zbGF0ZVBhdGhzKFxuICAgIFtvcHRzLmUyZVRlc3QuZmlsZXMgfHwgb3B0cy5lMmVUZXN0RmlsZXNdLFxuICAgIGVudi5maWxlQWxpYXNlc1xuICApO1xuICBndWxwLnRhc2soJ2UyZS10ZXN0OnJ1bicsIGFzeW5jIGZ1bmN0aW9uIGUyZVRlc3RSdW4oKSB7XG4gICAgY29uc3QgbW9jaGFPcHRzID0ge1xuICAgICAgcmVwb3J0ZXI6IHV0aWxzLmdldFRlc3RSZXBvcnRlcihvcHRzKSxcbiAgICAgIHRpbWVvdXQ6IG9wdHMudGVzdFRpbWVvdXQsXG4gICAgICByZXF1aXJlOiBvcHRzLnRlc3RSZXF1aXJlIHx8IFtdLFxuICAgICAgZXhpdDogdHJ1ZSxcbiAgICAgIGNvbG9yOiB0cnVlLFxuICAgICAgdHJhY2VXYXJuaW5nczogb3B0cy5lMmVUZXN0LnRyYWNlV2FybmluZ3MsXG4gICAgICB0cmFjZURlcHJlY2F0aW9uOiBvcHRzLmUyZVRlc3QudHJhY2VXYXJuaW5ncyxcbiAgICB9O1xuICAgIC8vIHNldCBlbnYgc28gb3VyIGNvZGUga25vd3Mgd2hlbiBpdCdzIGJlaW5nIHJ1biBpbiBhIHRlc3QgZW52XG4gICAgcHJvY2Vzcy5lbnYuX1RFU1RJTkcgPSAxO1xuXG4gICAgY29uc3QgbW9jaGFDbWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbmV3IEIoZnVuY3Rpb24gcnVuQ21kKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBndWxwXG4gICAgICAgICAgLnNyYyhlMmVUZXN0RmlsZXMsIHtyZWFkOiB0cnVlLCBhbGxvd0VtcHR5OiB0cnVlfSlcbiAgICAgICAgICAucGlwZShndWxwSWYoaXNWZXJib3NlKCksIGRlYnVnKCkpKVxuICAgICAgICAgIC5waXBlKG1vY2hhKG1vY2hhT3B0cykpXG4gICAgICAgICAgLm9uKCdlcnJvcicsIGZ1bmN0aW9uIG9uRXJyb3IoZXJyKSB7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5vbmNlKCdfcmVzdWx0JywgZnVuY3Rpb24gb25SZXN1bHQoLi4uYXJncykge1xuICAgICAgICAgICAgcmVzb2x2ZSguLi5hcmdzKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgZmlsZXMgPSBhd2FpdCBnbG9iYnkoZTJlVGVzdEZpbGVzKTtcbiAgICAgIC8vIGd1bHAtbW9jaGEgaGFzIGFuIGlzc3VlIHdoZXJlLCBpZiB0aGVyZSBhcmUgbm8gZmlsZXMgcGFzc2VkIGZyb20gZ3VscC5zcmMsXG4gICAgICAvLyBpdCB3aWxsIGp1c3QgcnVuIGV2ZXJ5dGhpbmcgaXQgZmluZHNcbiAgICAgIGlmICghZmlsZXMubGVuZ3RoKSB7XG4gICAgICAgIGxvZyhgTm8gZTJlIHRlc3QgZmlsZXMgZm91bmQgdXNpbmcgJyR7ZTJlVGVzdEZpbGVzfSdgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXdhaXQgbW9jaGFDbWQoKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKG9wdHMuZTJlVGVzdC5mb3JjZUV4aXQpIHtcbiAgICAgICAgcHJvY2Vzcy5leGl0KDApO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIGd1bHAudGFzaygnZTJlLXRlc3QnLCBndWxwLnNlcmllcyhlbnYudGVzdERlcHMsICdlMmUtdGVzdDpydW4nKSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY29uZmlndXJlLFxufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxZQUFELENBQXJCOztBQUNBLE1BQU1DLENBQUMsR0FBR0QsT0FBTyxDQUFDLFVBQUQs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
