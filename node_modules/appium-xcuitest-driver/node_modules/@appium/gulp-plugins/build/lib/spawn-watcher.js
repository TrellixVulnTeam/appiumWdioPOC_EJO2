'use strict';

require("source-map-support/register");

const log = require('fancy-log');

const red = require('ansi-red');

const notifier = require('node-notifier');

const moment = require('moment');

const COLOR_CODE_REGEXP = /\u001b\[(\d+(;\d+)*)?m/g;
module.exports = {
  use(gulp, opts = {}) {
    this.gulp = gulp;
    this.title = opts.build || 'Appium';
    this.exitOnError = true;
    this.errored = false;
    return this;
  },

  notify(subtitle, message) {
    if (process.argv.includes('--no-notif')) {
      return;
    }

    try {
      notifier.notify({
        title: this.title,
        subtitle: `${subtitle} ${moment().format('h:mm:ss')}`,
        message
      });
    } catch (ign) {
      log(`Notifier: [${this.title}] ${message}`);
    }
  },

  notifyOK() {
    this.notify('Build success!', 'All Good!');
  },

  handleError(err) {
    this.errored = true;
    const strErr = `${err}`;

    for (const line of strErr.split('\n')) {
      log.error(red(line));
    }

    const notifyErr = strErr.replace(COLOR_CODE_REGEXP, '');
    this.notify('Build failure!', notifyErr);

    if (this.exitOnError) {
      process.exit(1);
    }
  },

  configure(taskName, filePattern, sequence) {
    const notifyWatch = done => {
      if (!this.errored) {
        this.notifyOK();
      }

      this.errored = false;
      done();
    };

    this.gulp.task(taskName, () => {
      this.exitOnError = false;
      return this.gulp.watch(filePattern, {
        ignoreInitial: false,
        ignored: '**/gulpfile.js'
      }, this.gulp.series(sequence, notifyWatch));
    });
  }

};require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL3NwYXduLXdhdGNoZXIuanMiLCJuYW1lcyI6WyJsb2ciLCJyZXF1aXJlIiwicmVkIiwibm90aWZpZXIiLCJtb21lbnQiLCJDT0xPUl9DT0RFX1JFR0VYUCIsIm1vZHVsZSIsImV4cG9ydHMiLCJ1c2UiLCJndWxwIiwib3B0cyIsInRpdGxlIiwiYnVpbGQiLCJleGl0T25FcnJvciIsImVycm9yZWQiLCJub3RpZnkiLCJzdWJ0aXRsZSIsIm1lc3NhZ2UiLCJwcm9jZXNzIiwiYXJndiIsImluY2x1ZGVzIiwiZm9ybWF0IiwiaWduIiwibm90aWZ5T0siLCJoYW5kbGVFcnJvciIsImVyciIsInN0ckVyciIsImxpbmUiLCJzcGxpdCIsImVycm9yIiwibm90aWZ5RXJyIiwicmVwbGFjZSIsImV4aXQiLCJjb25maWd1cmUiLCJ0YXNrTmFtZSIsImZpbGVQYXR0ZXJuIiwic2VxdWVuY2UiLCJub3RpZnlXYXRjaCIsImRvbmUiLCJ0YXNrIiwid2F0Y2giLCJpZ25vcmVJbml0aWFsIiwiaWdub3JlZCIsInNlcmllcyJdLCJzb3VyY2VSb290IjoiLi4vLi4iLCJzb3VyY2VzIjpbImxpYi9zcGF3bi13YXRjaGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbG9nID0gcmVxdWlyZSgnZmFuY3ktbG9nJyk7XG5jb25zdCByZWQgPSByZXF1aXJlKCdhbnNpLXJlZCcpO1xuY29uc3Qgbm90aWZpZXIgPSByZXF1aXJlKCdub2RlLW5vdGlmaWVyJyk7XG5jb25zdCBtb21lbnQgPSByZXF1aXJlKCdtb21lbnQnKTtcblxuY29uc3QgQ09MT1JfQ09ERV9SRUdFWFAgPSAvXFx1MDAxYlxcWyhcXGQrKDtcXGQrKSopP20vZzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb250cm9sLXJlZ2V4XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB1c2UoZ3VscCwgb3B0cyA9IHt9KSB7XG4gICAgdGhpcy5ndWxwID0gZ3VscDtcbiAgICB0aGlzLnRpdGxlID0gb3B0cy5idWlsZCB8fCAnQXBwaXVtJztcblxuICAgIHRoaXMuZXhpdE9uRXJyb3IgPSB0cnVlO1xuICAgIHRoaXMuZXJyb3JlZCA9IGZhbHNlO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgbm90aWZ5KHN1YnRpdGxlLCBtZXNzYWdlKSB7XG4gICAgaWYgKHByb2Nlc3MuYXJndi5pbmNsdWRlcygnLS1uby1ub3RpZicpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIG5vdGlmaWVyLm5vdGlmeSh7XG4gICAgICAgIHRpdGxlOiB0aGlzLnRpdGxlLFxuICAgICAgICBzdWJ0aXRsZTogYCR7c3VidGl0bGV9ICR7bW9tZW50KCkuZm9ybWF0KCdoOm1tOnNzJyl9YCxcbiAgICAgICAgbWVzc2FnZSxcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGlnbikge1xuICAgICAgbG9nKGBOb3RpZmllcjogWyR7dGhpcy50aXRsZX1dICR7bWVzc2FnZX1gKTtcbiAgICB9XG4gIH0sXG5cbiAgbm90aWZ5T0soKSB7XG4gICAgdGhpcy5ub3RpZnkoJ0J1aWxkIHN1Y2Nlc3MhJywgJ0FsbCBHb29kIScpO1xuICB9LFxuXG4gIGhhbmRsZUVycm9yKGVycikge1xuICAgIHRoaXMuZXJyb3JlZCA9IHRydWU7XG5cbiAgICAvLyBsb2cgdGhlIGVycm9yXG4gICAgY29uc3Qgc3RyRXJyID0gYCR7ZXJyfWA7XG4gICAgZm9yIChjb25zdCBsaW5lIG9mIHN0ckVyci5zcGxpdCgnXFxuJykpIHtcbiAgICAgIGxvZy5lcnJvcihyZWQobGluZSkpO1xuICAgIH1cblxuICAgIC8vIHVzZSB0aGUgc3lzdGVtIG5vdGlmaWVyXG4gICAgY29uc3Qgbm90aWZ5RXJyID0gc3RyRXJyLnJlcGxhY2UoQ09MT1JfQ09ERV9SRUdFWFAsICcnKTtcbiAgICB0aGlzLm5vdGlmeSgnQnVpbGQgZmFpbHVyZSEnLCBub3RpZnlFcnIpO1xuICAgIGlmICh0aGlzLmV4aXRPbkVycm9yKSB7XG4gICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgfVxuICB9LFxuXG4gIGNvbmZpZ3VyZSh0YXNrTmFtZSwgZmlsZVBhdHRlcm4sIHNlcXVlbmNlKSB7XG4gICAgY29uc3Qgbm90aWZ5V2F0Y2ggPSAoZG9uZSkgPT4ge1xuICAgICAgaWYgKCF0aGlzLmVycm9yZWQpIHtcbiAgICAgICAgdGhpcy5ub3RpZnlPSygpO1xuICAgICAgfVxuICAgICAgdGhpcy5lcnJvcmVkID0gZmFsc2U7XG4gICAgICBkb25lKCk7XG4gICAgfTtcbiAgICB0aGlzLmd1bHAudGFzayh0YXNrTmFtZSwgKCkgPT4ge1xuICAgICAgdGhpcy5leGl0T25FcnJvciA9IGZhbHNlO1xuXG4gICAgICByZXR1cm4gdGhpcy5ndWxwLndhdGNoKFxuICAgICAgICBmaWxlUGF0dGVybixcbiAgICAgICAge1xuICAgICAgICAgIGlnbm9yZUluaXRpYWw6IGZhbHNlLFxuICAgICAgICAgIGlnbm9yZWQ6ICcqKi9ndWxwZmlsZS5qcycsXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuZ3VscC5zZXJpZXMoc2VxdWVuY2UsIG5vdGlmeVdhdGNoKVxuICAgICAgKTtcbiAgICB9KTtcbiAgfSxcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsR0FBRyxHQUFHQyxPQUFPLENBQUMsV0FBRCxDQUFuQjs7QUFDQSxNQUFNQyxHQUFHLEdBQUdELE9BQU8sQ0FBQyxVQUFELENBQW5COztBQUNBLE1BQU1FLFFBQVEsR0FBR0YsT0FBTyxDQUFDLGVBQUQsQ0FBeEI7O0FBQ0EsTUFBTUcsTUFBTSxHQUFHSCxPQUFPLENBQUMsUUFBRCxDQUF0Qjs7QUFFQSxNQUFNSSxpQkFBaUIsR0FBRyx5QkFBMUI7QUFFQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0VBQ2ZDLEdBQUcsQ0FBQ0MsSUFBRCxFQUFPQyxJQUFJLEdBQUcsRUFBZCxFQUFrQjtJQUNuQixLQUFLRCxJQUFMLEdBQVlBLElBQVo7SUFDQSxLQUFLRSxLQUFMLEdBQWFELElBQUksQ0FBQ0UsS0FBTCxJQUFjLFFBQTNCO0lBRUEsS0FBS0MsV0FBTCxHQUFtQixJQUFuQjtJQUNBLEtBQUtDLE9BQUwsR0FBZSxLQUFmO0lBRUEsT0FBTyxJQUFQO0VBQ0QsQ0FUYzs7RUFXZkMsTUFBTSxDQUFDQyxRQUFELEVBQVdDLE9BQVgsRUFBb0I7SUFDeEIsSUFBSUMsT0FBTyxDQUFDQyxJQUFSLENBQWFDLFFBQWIsQ0FBc0IsWUFBdEIsQ0FBSixFQUF5QztNQUN2QztJQUNEOztJQUVELElBQUk7TUFDRmpCLFFBQVEsQ0FBQ1ksTUFBVCxDQUFnQjtRQUNkSixLQUFLLEVBQUUsS0FBS0EsS0FERTtRQUVkSyxRQUFRLEVBQUcsR0FBRUEsUUFBUyxJQUFHWixNQUFNLEdBQUdpQixNQUFULENBQWdCLFNBQWhCLENBQTJCLEVBRnRDO1FBR2RKO01BSGMsQ0FBaEI7SUFLRCxDQU5ELENBTUUsT0FBT0ssR0FBUCxFQUFZO01BQ1p0QixHQUFHLENBQUUsY0FBYSxLQUFLVyxLQUFNLEtBQUlNLE9BQVEsRUFBdEMsQ0FBSDtJQUNEO0VBQ0YsQ0F6QmM7O0VBMkJmTSxRQUFRLEdBQUc7SUFDVCxLQUFLUixNQUFMLENBQVksZ0JBQVosRUFBOEIsV0FBOUI7RUFDRCxDQTdCYzs7RUErQmZTLFdBQVcsQ0FBQ0MsR0FBRCxFQUFNO0lBQ2YsS0FBS1gsT0FBTCxHQUFlLElBQWY7SUFHQSxNQUFNWSxNQUFNLEdBQUksR0FBRUQsR0FBSSxFQUF0Qjs7SUFDQSxLQUFLLE1BQU1FLElBQVgsSUFBbUJELE1BQU0sQ0FBQ0UsS0FBUCxDQUFhLElBQWIsQ0FBbkIsRUFBdUM7TUFDckM1QixHQUFHLENBQUM2QixLQUFKLENBQVUzQixHQUFHLENBQUN5QixJQUFELENBQWI7SUFDRDs7SUFHRCxNQUFNRyxTQUFTLEdBQUdKLE1BQU0sQ0FBQ0ssT0FBUCxDQUFlMUIsaUJBQWYsRUFBa0MsRUFBbEMsQ0FBbEI7SUFDQSxLQUFLVSxNQUFMLENBQVksZ0JBQVosRUFBOEJlLFNBQTlCOztJQUNBLElBQUksS0FBS2pCLFdBQVQsRUFBc0I7TUFDcEJLLE9BQU8sQ0FBQ2MsSUFBUixDQUFhLENBQWI7SUFDRDtFQUNGLENBOUNjOztFQWdEZkMsU0FBUyxDQUFDQyxRQUFELEVBQVdDLFdBQVgsRUFBd0JDLFFBQXhCLEVBQWtDO0lBQ3pDLE1BQU1DLFdBQVcsR0FBSUMsSUFBRCxJQUFVO01BQzVCLElBQUksQ0FBQyxLQUFLeEIsT0FBVixFQUFtQjtRQUNqQixLQUFLUyxRQUFMO01BQ0Q7O01BQ0QsS0FBS1QsT0FBTCxHQUFlLEtBQWY7TUFDQXdCLElBQUk7SUFDTCxDQU5EOztJQU9BLEtBQUs3QixJQUFMLENBQVU4QixJQUFWLENBQWVMLFFBQWYsRUFBeUIsTUFBTTtNQUM3QixLQUFLckIsV0FBTCxHQUFtQixLQUFuQjtNQUVBLE9BQU8sS0FBS0osSUFBTCxDQUFVK0IsS0FBVixDQUNMTCxXQURLLEVBRUw7UUFDRU0sYUFBYSxFQUFFLEtBRGpCO1FBRUVDLE9BQU8sRUFBRTtNQUZYLENBRkssRUFNTCxLQUFLakMsSUFBTCxDQUFVa0MsTUFBVixDQUFpQlAsUUFBakIsRUFBMkJDLFdBQTNCLENBTkssQ0FBUDtJQVFELENBWEQ7RUFZRDs7QUFwRWMsQ0FBakIifQ==
