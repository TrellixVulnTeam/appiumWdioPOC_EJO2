"use strict";

require("source-map-support/register");

const {
  Transform
} = require('stream');

const log = require('fancy-log');

const yaml = require('js-yaml');

const {
  EOL
} = require('os');

const PluginError = require('plugin-error');

const red = require('ansi-red');

function gulpYamlLint() {
  let errCount = 0;
  return new Transform({
    objectMode: true,

    transform(file, enc, cb) {
      try {
        yaml.load(file.contents.toString(enc));
      } catch (err) {
        errCount++;
        log.error(`Invalid YAML file: '${file.path}'`);

        for (const line of err.message.split(EOL)) {
          log.error(line);
        }
      }

      cb();
    },

    flush(done) {
      if (errCount > 0) {
        log.error(`YAML errors found. Due to the limitations of YAML linting, the error `);
        log.error(`is most likely in the line immediately ${red('before')} the line reported.`);
        return done(new PluginError('gulp-yaml-lint', {
          name: 'YAMLError',
          message: `Failed with ${errCount} ${errCount === 1 ? 'error' : 'errors'}`
        }));
      }

      done();
    }

  });
}

module.exports = gulpYamlLint;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL3lhbWwtbGludC5qcyIsIm5hbWVzIjpbIlRyYW5zZm9ybSIsInJlcXVpcmUiLCJsb2ciLCJ5YW1sIiwiRU9MIiwiUGx1Z2luRXJyb3IiLCJyZWQiLCJndWxwWWFtbExpbnQiLCJlcnJDb3VudCIsIm9iamVjdE1vZGUiLCJ0cmFuc2Zvcm0iLCJmaWxlIiwiZW5jIiwiY2IiLCJsb2FkIiwiY29udGVudHMiLCJ0b1N0cmluZyIsImVyciIsImVycm9yIiwicGF0aCIsImxpbmUiLCJtZXNzYWdlIiwic3BsaXQiLCJmbHVzaCIsImRvbmUiLCJuYW1lIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiLi4vLi4iLCJzb3VyY2VzIjpbImxpYi95YW1sLWxpbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgcHJvbWlzZS9wcmVmZXItYXdhaXQtdG8tY2FsbGJhY2tzICovXG5jb25zdCB7VHJhbnNmb3JtfSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xuY29uc3QgbG9nID0gcmVxdWlyZSgnZmFuY3ktbG9nJyk7XG5jb25zdCB5YW1sID0gcmVxdWlyZSgnanMteWFtbCcpO1xuY29uc3Qge0VPTH0gPSByZXF1aXJlKCdvcycpO1xuY29uc3QgUGx1Z2luRXJyb3IgPSByZXF1aXJlKCdwbHVnaW4tZXJyb3InKTtcbmNvbnN0IHJlZCA9IHJlcXVpcmUoJ2Fuc2ktcmVkJyk7XG5cbmZ1bmN0aW9uIGd1bHBZYW1sTGludCgpIHtcbiAgbGV0IGVyckNvdW50ID0gMDtcbiAgcmV0dXJuIG5ldyBUcmFuc2Zvcm0oe1xuICAgIG9iamVjdE1vZGU6IHRydWUsXG4gICAgdHJhbnNmb3JtKGZpbGUsIGVuYywgY2IpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHlhbWwubG9hZChmaWxlLmNvbnRlbnRzLnRvU3RyaW5nKGVuYykpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGVyckNvdW50Kys7XG4gICAgICAgIGxvZy5lcnJvcihgSW52YWxpZCBZQU1MIGZpbGU6ICcke2ZpbGUucGF0aH0nYCk7XG4gICAgICAgIGZvciAoY29uc3QgbGluZSBvZiBlcnIubWVzc2FnZS5zcGxpdChFT0wpKSB7XG4gICAgICAgICAgbG9nLmVycm9yKGxpbmUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjYigpO1xuICAgIH0sXG4gICAgZmx1c2goZG9uZSkge1xuICAgICAgaWYgKGVyckNvdW50ID4gMCkge1xuICAgICAgICBsb2cuZXJyb3IoYFlBTUwgZXJyb3JzIGZvdW5kLiBEdWUgdG8gdGhlIGxpbWl0YXRpb25zIG9mIFlBTUwgbGludGluZywgdGhlIGVycm9yIGApO1xuICAgICAgICBsb2cuZXJyb3IoYGlzIG1vc3QgbGlrZWx5IGluIHRoZSBsaW5lIGltbWVkaWF0ZWx5ICR7cmVkKCdiZWZvcmUnKX0gdGhlIGxpbmUgcmVwb3J0ZWQuYCk7XG4gICAgICAgIHJldHVybiBkb25lKFxuICAgICAgICAgIG5ldyBQbHVnaW5FcnJvcignZ3VscC15YW1sLWxpbnQnLCB7XG4gICAgICAgICAgICBuYW1lOiAnWUFNTEVycm9yJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGBGYWlsZWQgd2l0aCAke2VyckNvdW50fSAke2VyckNvdW50ID09PSAxID8gJ2Vycm9yJyA6ICdlcnJvcnMnfWAsXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGRvbmUoKTtcbiAgICB9LFxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBndWxwWWFtbExpbnQ7XG4iXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxNQUFNO0VBQUNBO0FBQUQsSUFBY0MsT0FBTyxDQUFDLFFBQUQsQ0FBM0I7O0FBQ0EsTUFBTUMsR0FBRyxHQUFHRCxPQUFPLENBQUMsV0FBRCxDQUFuQjs7QUFDQSxNQUFNRSxJQUFJLEdBQUdGLE9BQU8sQ0FBQyxTQUFELENBQXBCOztBQUNBLE1BQU07RUFBQ0c7QUFBRCxJQUFRSCxPQUFPLENBQUMsSUFBRCxDQUFyQjs7QUFDQSxNQUFNSSxXQUFXLEdBQUdKLE9BQU8sQ0FBQyxjQUFELENBQTNCOztBQUNBLE1BQU1LLEdBQUcsR0FBR0wsT0FBTyxDQUFDLFVBQUQsQ0FBbkI7O0FBRUEsU0FBU00sWUFBVCxHQUF3QjtFQUN0QixJQUFJQyxRQUFRLEdBQUcsQ0FBZjtFQUNBLE9BQU8sSUFBSVIsU0FBSixDQUFjO0lBQ25CUyxVQUFVLEVBQUUsSUFETzs7SUFFbkJDLFNBQVMsQ0FBQ0MsSUFBRCxFQUFPQyxHQUFQLEVBQVlDLEVBQVosRUFBZ0I7TUFDdkIsSUFBSTtRQUNGVixJQUFJLENBQUNXLElBQUwsQ0FBVUgsSUFBSSxDQUFDSSxRQUFMLENBQWNDLFFBQWQsQ0FBdUJKLEdBQXZCLENBQVY7TUFDRCxDQUZELENBRUUsT0FBT0ssR0FBUCxFQUFZO1FBQ1pULFFBQVE7UUFDUk4sR0FBRyxDQUFDZ0IsS0FBSixDQUFXLHVCQUFzQlAsSUFBSSxDQUFDUSxJQUFLLEdBQTNDOztRQUNBLEtBQUssTUFBTUMsSUFBWCxJQUFtQkgsR0FBRyxDQUFDSSxPQUFKLENBQVlDLEtBQVosQ0FBa0JsQixHQUFsQixDQUFuQixFQUEyQztVQUN6Q0YsR0FBRyxDQUFDZ0IsS0FBSixDQUFVRSxJQUFWO1FBQ0Q7TUFDRjs7TUFDRFAsRUFBRTtJQUNILENBYmtCOztJQWNuQlUsS0FBSyxDQUFDQyxJQUFELEVBQU87TUFDVixJQUFJaEIsUUFBUSxHQUFHLENBQWYsRUFBa0I7UUFDaEJOLEdBQUcsQ0FBQ2dCLEtBQUosQ0FBVyx1RUFBWDtRQUNBaEIsR0FBRyxDQUFDZ0IsS0FBSixDQUFXLDBDQUF5Q1osR0FBRyxDQUFDLFFBQUQsQ0FBVyxxQkFBbEU7UUFDQSxPQUFPa0IsSUFBSSxDQUNULElBQUluQixXQUFKLENBQWdCLGdCQUFoQixFQUFrQztVQUNoQ29CLElBQUksRUFBRSxXQUQwQjtVQUVoQ0osT0FBTyxFQUFHLGVBQWNiLFFBQVMsSUFBR0EsUUFBUSxLQUFLLENBQWIsR0FBaUIsT0FBakIsR0FBMkIsUUFBUztRQUZ4QyxDQUFsQyxDQURTLENBQVg7TUFNRDs7TUFDRGdCLElBQUk7SUFDTDs7RUExQmtCLENBQWQsQ0FBUDtBQTRCRDs7QUFFREUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCcEIsWUFBakIifQ==
