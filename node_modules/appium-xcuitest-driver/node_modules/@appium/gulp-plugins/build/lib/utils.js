'use strict';

require("source-map-support/register");

const _ = require('lodash');

const {
  exec
} = require('child_process');

const B = require('bluebird');

const {
  quote
} = require('shell-quote');

const interpolate = function interpolate(s, opts) {
  return _.keys(opts).reduce(function replace(s, k) {
    return s.replace(new RegExp(`\\$\\{\\s*${k}\\s*\\}`, 'g'), opts[k]);
  }, s);
};

const translatePaths = function translatePaths(files, fileAliases) {
  if (!_.isArray(files)) {
    files = [files];
  }

  return _.flatten(files).map(function interpolateFileAliases(f) {
    return interpolate(f, fileAliases);
  });
};

const isVerbose = function isVerbose() {
  return process.env.VERBOSE === '1';
};

const getTestReporter = function getTestReporter(opts) {
  const isForceLogMode = parseInt(process.env._FORCE_LOGS, 10) === 1;
  return isForceLogMode ? 'spec' : process.env.REPORTER ? process.env.REPORTER : opts.testReporter;
};

const pExec = function pExec(cmd, args = [], opts = {}) {
  return new B(function executeCmd(resolve, reject) {
    exec(`${quote([cmd])} ${quote(args)}`, opts, function cb(err, stdout, stderr) {
      if (err) {
        err.stdout = stdout;
        err.stderr = stderr;
        return reject(err);
      }

      resolve({
        stdout,
        stderr
      });
    });
  });
};

module.exports = {
  interpolate,
  translatePaths,
  isVerbose,
  getTestReporter,
  exec: pExec
};require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL3V0aWxzLmpzIiwibmFtZXMiOlsiXyIsInJlcXVpcmUiLCJleGVjIiwiQiIsInF1b3RlIiwiaW50ZXJwb2xhdGUiLCJzIiwib3B0cyIsImtleXMiLCJyZWR1Y2UiLCJyZXBsYWNlIiwiayIsIlJlZ0V4cCIsInRyYW5zbGF0ZVBhdGhzIiwiZmlsZXMiLCJmaWxlQWxpYXNlcyIsImlzQXJyYXkiLCJmbGF0dGVuIiwibWFwIiwiaW50ZXJwb2xhdGVGaWxlQWxpYXNlcyIsImYiLCJpc1ZlcmJvc2UiLCJwcm9jZXNzIiwiZW52IiwiVkVSQk9TRSIsImdldFRlc3RSZXBvcnRlciIsImlzRm9yY2VMb2dNb2RlIiwicGFyc2VJbnQiLCJfRk9SQ0VfTE9HUyIsIlJFUE9SVEVSIiwidGVzdFJlcG9ydGVyIiwicEV4ZWMiLCJjbWQiLCJhcmdzIiwiZXhlY3V0ZUNtZCIsInJlc29sdmUiLCJyZWplY3QiLCJjYiIsImVyciIsInN0ZG91dCIsInN0ZGVyciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6Ii4uLy4uIiwic291cmNlcyI6WyJsaWIvdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5jb25zdCB7ZXhlY30gPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJyk7XG5jb25zdCBCID0gcmVxdWlyZSgnYmx1ZWJpcmQnKTtcbmNvbnN0IHtxdW90ZX0gPSByZXF1aXJlKCdzaGVsbC1xdW90ZScpO1xuXG4vLyBzdHJpbmcgaW50ZXJwb2xhdGlvblxuY29uc3QgaW50ZXJwb2xhdGUgPSBmdW5jdGlvbiBpbnRlcnBvbGF0ZShzLCBvcHRzKSB7XG4gIHJldHVybiBfLmtleXMob3B0cykucmVkdWNlKGZ1bmN0aW9uIHJlcGxhY2Uocywgaykge1xuICAgIHJldHVybiBzLnJlcGxhY2UobmV3IFJlZ0V4cChgXFxcXCRcXFxce1xcXFxzKiR7a31cXFxccypcXFxcfWAsICdnJyksIG9wdHNba10pO1xuICB9LCBzKTtcbn07XG5cbmNvbnN0IHRyYW5zbGF0ZVBhdGhzID0gZnVuY3Rpb24gdHJhbnNsYXRlUGF0aHMoZmlsZXMsIGZpbGVBbGlhc2VzKSB7XG4gIGlmICghXy5pc0FycmF5KGZpbGVzKSkge1xuICAgIGZpbGVzID0gW2ZpbGVzXTtcbiAgfVxuICByZXR1cm4gXy5mbGF0dGVuKGZpbGVzKS5tYXAoZnVuY3Rpb24gaW50ZXJwb2xhdGVGaWxlQWxpYXNlcyhmKSB7XG4gICAgcmV0dXJuIGludGVycG9sYXRlKGYsIGZpbGVBbGlhc2VzKTtcbiAgfSk7XG59O1xuXG5jb25zdCBpc1ZlcmJvc2UgPSBmdW5jdGlvbiBpc1ZlcmJvc2UoKSB7XG4gIHJldHVybiBwcm9jZXNzLmVudi5WRVJCT1NFID09PSAnMSc7XG59O1xuXG5jb25zdCBnZXRUZXN0UmVwb3J0ZXIgPSBmdW5jdGlvbiBnZXRUZXN0UmVwb3J0ZXIob3B0cykge1xuICBjb25zdCBpc0ZvcmNlTG9nTW9kZSA9IHBhcnNlSW50KHByb2Nlc3MuZW52Ll9GT1JDRV9MT0dTLCAxMCkgPT09IDE7XG4gIHJldHVybiBpc0ZvcmNlTG9nTW9kZSA/ICdzcGVjJyA6IHByb2Nlc3MuZW52LlJFUE9SVEVSID8gcHJvY2Vzcy5lbnYuUkVQT1JURVIgOiBvcHRzLnRlc3RSZXBvcnRlcjtcbn07XG5cbmNvbnN0IHBFeGVjID0gZnVuY3Rpb24gcEV4ZWMoY21kLCBhcmdzID0gW10sIG9wdHMgPSB7fSkge1xuICByZXR1cm4gbmV3IEIoZnVuY3Rpb24gZXhlY3V0ZUNtZChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBleGVjKGAke3F1b3RlKFtjbWRdKX0gJHtxdW90ZShhcmdzKX1gLCBvcHRzLCBmdW5jdGlvbiBjYihlcnIsIHN0ZG91dCwgc3RkZXJyKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHByb21pc2UvcHJlZmVyLWF3YWl0LXRvLWNhbGxiYWNrc1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBlcnIuc3Rkb3V0ID0gc3Rkb3V0O1xuICAgICAgICBlcnIuc3RkZXJyID0gc3RkZXJyO1xuICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICB9XG4gICAgICByZXNvbHZlKHtcbiAgICAgICAgc3Rkb3V0LFxuICAgICAgICBzdGRlcnIsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaW50ZXJwb2xhdGUsXG4gIHRyYW5zbGF0ZVBhdGhzLFxuICBpc1ZlcmJvc2UsXG4gIGdldFRlc3RSZXBvcnRlcixcbiAgZXhlYzogcEV4ZWMsXG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLENBQUMsR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBakI7O0FBQ0EsTUFBTTtFQUFDQztBQUFELElBQVNELE9BQU8sQ0FBQyxlQUFELENBQXRCOztBQUNBLE1BQU1FLENBQUMsR0FBR0YsT0FBTyxDQUFDLFVBQUQsQ0FBakI7O0FBQ0EsTUFBTTtFQUFDRztBQUFELElBQVVILE9BQU8sQ0FBQyxhQUFELENBQXZCOztBQUdBLE1BQU1JLFdBQVcsR0FBRyxTQUFTQSxXQUFULENBQXFCQyxDQUFyQixFQUF3QkMsSUFBeEIsRUFBOEI7RUFDaEQsT0FBT1AsQ0FBQyxDQUFDUSxJQUFGLENBQU9ELElBQVAsRUFBYUUsTUFBYixDQUFvQixTQUFTQyxPQUFULENBQWlCSixDQUFqQixFQUFvQkssQ0FBcEIsRUFBdUI7SUFDaEQsT0FBT0wsQ0FBQyxDQUFDSSxPQUFGLENBQVUsSUFBSUUsTUFBSixDQUFZLGFBQVlELENBQUUsU0FBMUIsRUFBb0MsR0FBcEMsQ0FBVixFQUFvREosSUFBSSxDQUFDSSxDQUFELENBQXhELENBQVA7RUFDRCxDQUZNLEVBRUpMLENBRkksQ0FBUDtBQUdELENBSkQ7O0FBTUEsTUFBTU8sY0FBYyxHQUFHLFNBQVNBLGNBQVQsQ0FBd0JDLEtBQXhCLEVBQStCQyxXQUEvQixFQUE0QztFQUNqRSxJQUFJLENBQUNmLENBQUMsQ0FBQ2dCLE9BQUYsQ0FBVUYsS0FBVixDQUFMLEVBQXVCO0lBQ3JCQSxLQUFLLEdBQUcsQ0FBQ0EsS0FBRCxDQUFSO0VBQ0Q7O0VBQ0QsT0FBT2QsQ0FBQyxDQUFDaUIsT0FBRixDQUFVSCxLQUFWLEVBQWlCSSxHQUFqQixDQUFxQixTQUFTQyxzQkFBVCxDQUFnQ0MsQ0FBaEMsRUFBbUM7SUFDN0QsT0FBT2YsV0FBVyxDQUFDZSxDQUFELEVBQUlMLFdBQUosQ0FBbEI7RUFDRCxDQUZNLENBQVA7QUFHRCxDQVBEOztBQVNBLE1BQU1NLFNBQVMsR0FBRyxTQUFTQSxTQUFULEdBQXFCO0VBQ3JDLE9BQU9DLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxPQUFaLEtBQXdCLEdBQS9CO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNQyxlQUFlLEdBQUcsU0FBU0EsZUFBVCxDQUF5QmxCLElBQXpCLEVBQStCO0VBQ3JELE1BQU1tQixjQUFjLEdBQUdDLFFBQVEsQ0FBQ0wsT0FBTyxDQUFDQyxHQUFSLENBQVlLLFdBQWIsRUFBMEIsRUFBMUIsQ0FBUixLQUEwQyxDQUFqRTtFQUNBLE9BQU9GLGNBQWMsR0FBRyxNQUFILEdBQVlKLE9BQU8sQ0FBQ0MsR0FBUixDQUFZTSxRQUFaLEdBQXVCUCxPQUFPLENBQUNDLEdBQVIsQ0FBWU0sUUFBbkMsR0FBOEN0QixJQUFJLENBQUN1QixZQUFwRjtBQUNELENBSEQ7O0FBS0EsTUFBTUMsS0FBSyxHQUFHLFNBQVNBLEtBQVQsQ0FBZUMsR0FBZixFQUFvQkMsSUFBSSxHQUFHLEVBQTNCLEVBQStCMUIsSUFBSSxHQUFHLEVBQXRDLEVBQTBDO0VBQ3RELE9BQU8sSUFBSUosQ0FBSixDQUFNLFNBQVMrQixVQUFULENBQW9CQyxPQUFwQixFQUE2QkMsTUFBN0IsRUFBcUM7SUFDaERsQyxJQUFJLENBQUUsR0FBRUUsS0FBSyxDQUFDLENBQUM0QixHQUFELENBQUQsQ0FBUSxJQUFHNUIsS0FBSyxDQUFDNkIsSUFBRCxDQUFPLEVBQWhDLEVBQW1DMUIsSUFBbkMsRUFBeUMsU0FBUzhCLEVBQVQsQ0FBWUMsR0FBWixFQUFpQkMsTUFBakIsRUFBeUJDLE1BQXpCLEVBQWlDO01BRTVFLElBQUlGLEdBQUosRUFBUztRQUNQQSxHQUFHLENBQUNDLE1BQUosR0FBYUEsTUFBYjtRQUNBRCxHQUFHLENBQUNFLE1BQUosR0FBYUEsTUFBYjtRQUNBLE9BQU9KLE1BQU0sQ0FBQ0UsR0FBRCxDQUFiO01BQ0Q7O01BQ0RILE9BQU8sQ0FBQztRQUNOSSxNQURNO1FBRU5DO01BRk0sQ0FBRCxDQUFQO0lBSUQsQ0FYRyxDQUFKO0VBWUQsQ0FiTSxDQUFQO0FBY0QsQ0FmRDs7QUFpQkFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtFQUNmckMsV0FEZTtFQUVmUSxjQUZlO0VBR2ZRLFNBSGU7RUFJZkksZUFKZTtFQUtmdkIsSUFBSSxFQUFFNkI7QUFMUyxDQUFqQiJ9
