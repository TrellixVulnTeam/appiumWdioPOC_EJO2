'use strict';

require("source-map-support/register");

const gulp = require('gulp');

const {
  Transpiler,
  spawnWatcher,
  isVerbose
} = require('../..');

const _ = require('lodash');

const B = require('bluebird');

const {
  exec
} = require('../../lib/utils');

const assert = require('assert');

const debug = require('gulp-debug');

const gulpIf = require('gulp-if');

const globby = require('globby');

const rimraf = B.promisify(require('rimraf'));
spawnWatcher.use(gulp);
gulp.task('generate-lots-of-files', async function () {
  await rimraf('test/generated/es7 build/generated');
  await exec('mkdir', ['-p', 'test/generated/es7']);
  await B.all([..._.times(24).map(function (i) {
    return exec('cp', ['test/fixtures/es7/lib/a.es7.js', `test/generated/es7/a${i + 1}.es7.js`]);
  })]);
});
gulp.task('transpile-lots-of-es7-files', function () {
  const transpiler = new Transpiler();
  return gulp.src('test/generated/es7/**/*.js').pipe(gulpIf(isVerbose(), debug())).pipe(transpiler.stream()).on('error', spawnWatcher.handleError).pipe(gulp.dest('build/generated'));
});
gulp.task('transpile-lots-of-files', gulp.series('generate-lots-of-files', 'transpile-lots-of-es7-files'));
gulp.task('test-transpile-lots-of-es7-files', async function testTranspileLotsOfFiles() {
  let files = await globby('test/generated/es7/**/*.js');
  const numOfFiles = files.length;
  assert(numOfFiles > 16);
  files = await globby('build/generated/a*.js');
  assert(files.length === numOfFiles);
  files = await globby('build/generated/*.es7.js');
  assert(files.length === 0);
});
gulp.task('test-transpile-lots-of-files', gulp.series('transpile-lots-of-files', 'test-transpile-lots-of-es7-files'));require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC9ndWxwZmlsZS1qcy9nZW5lcmF0ZS5qcyIsIm5hbWVzIjpbImd1bHAiLCJyZXF1aXJlIiwiVHJhbnNwaWxlciIsInNwYXduV2F0Y2hlciIsImlzVmVyYm9zZSIsIl8iLCJCIiwiZXhlYyIsImFzc2VydCIsImRlYnVnIiwiZ3VscElmIiwiZ2xvYmJ5IiwicmltcmFmIiwicHJvbWlzaWZ5IiwidXNlIiwidGFzayIsImFsbCIsInRpbWVzIiwibWFwIiwiaSIsInRyYW5zcGlsZXIiLCJzcmMiLCJwaXBlIiwic3RyZWFtIiwib24iLCJoYW5kbGVFcnJvciIsImRlc3QiLCJzZXJpZXMiLCJ0ZXN0VHJhbnNwaWxlTG90c09mRmlsZXMiLCJmaWxlcyIsIm51bU9mRmlsZXMiLCJsZW5ndGgiXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIiwic291cmNlcyI6WyJ0ZXN0L2d1bHBmaWxlLWpzL2dlbmVyYXRlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZ3VscCA9IHJlcXVpcmUoJ2d1bHAnKTtcbmNvbnN0IHtUcmFuc3BpbGVyLCBzcGF3bldhdGNoZXIsIGlzVmVyYm9zZX0gPSByZXF1aXJlKCcuLi8uLicpO1xuY29uc3QgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xuY29uc3QgQiA9IHJlcXVpcmUoJ2JsdWViaXJkJyk7XG5jb25zdCB7ZXhlY30gPSByZXF1aXJlKCcuLi8uLi9saWIvdXRpbHMnKTtcbmNvbnN0IGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xuY29uc3QgZGVidWcgPSByZXF1aXJlKCdndWxwLWRlYnVnJyk7XG5jb25zdCBndWxwSWYgPSByZXF1aXJlKCdndWxwLWlmJyk7XG5jb25zdCBnbG9iYnkgPSByZXF1aXJlKCdnbG9iYnknKTtcbmNvbnN0IHJpbXJhZiA9IEIucHJvbWlzaWZ5KHJlcXVpcmUoJ3JpbXJhZicpKTtcblxuc3Bhd25XYXRjaGVyLnVzZShndWxwKTtcblxuZ3VscC50YXNrKCdnZW5lcmF0ZS1sb3RzLW9mLWZpbGVzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICBhd2FpdCByaW1yYWYoJ3Rlc3QvZ2VuZXJhdGVkL2VzNyBidWlsZC9nZW5lcmF0ZWQnKTtcbiAgYXdhaXQgZXhlYygnbWtkaXInLCBbJy1wJywgJ3Rlc3QvZ2VuZXJhdGVkL2VzNyddKTtcbiAgYXdhaXQgQi5hbGwoW1xuICAgIC4uLl8udGltZXMoMjQpLm1hcChmdW5jdGlvbiAoaSkge1xuICAgICAgcmV0dXJuIGV4ZWMoJ2NwJywgWyd0ZXN0L2ZpeHR1cmVzL2VzNy9saWIvYS5lczcuanMnLCBgdGVzdC9nZW5lcmF0ZWQvZXM3L2Eke2kgKyAxfS5lczcuanNgXSk7XG4gICAgfSksXG4gIF0pO1xufSk7XG5cbmd1bHAudGFzaygndHJhbnNwaWxlLWxvdHMtb2YtZXM3LWZpbGVzJywgZnVuY3Rpb24gKCkge1xuICBjb25zdCB0cmFuc3BpbGVyID0gbmV3IFRyYW5zcGlsZXIoKTtcbiAgcmV0dXJuIGd1bHBcbiAgICAuc3JjKCd0ZXN0L2dlbmVyYXRlZC9lczcvKiovKi5qcycpXG4gICAgLnBpcGUoZ3VscElmKGlzVmVyYm9zZSgpLCBkZWJ1ZygpKSlcbiAgICAucGlwZSh0cmFuc3BpbGVyLnN0cmVhbSgpKVxuICAgIC5vbignZXJyb3InLCBzcGF3bldhdGNoZXIuaGFuZGxlRXJyb3IpXG4gICAgLnBpcGUoZ3VscC5kZXN0KCdidWlsZC9nZW5lcmF0ZWQnKSk7XG59KTtcblxuZ3VscC50YXNrKFxuICAndHJhbnNwaWxlLWxvdHMtb2YtZmlsZXMnLFxuICBndWxwLnNlcmllcygnZ2VuZXJhdGUtbG90cy1vZi1maWxlcycsICd0cmFuc3BpbGUtbG90cy1vZi1lczctZmlsZXMnKVxuKTtcblxuZ3VscC50YXNrKCd0ZXN0LXRyYW5zcGlsZS1sb3RzLW9mLWVzNy1maWxlcycsIGFzeW5jIGZ1bmN0aW9uIHRlc3RUcmFuc3BpbGVMb3RzT2ZGaWxlcygpIHtcbiAgbGV0IGZpbGVzID0gYXdhaXQgZ2xvYmJ5KCd0ZXN0L2dlbmVyYXRlZC9lczcvKiovKi5qcycpO1xuICBjb25zdCBudW1PZkZpbGVzID0gZmlsZXMubGVuZ3RoO1xuICBhc3NlcnQobnVtT2ZGaWxlcyA+IDE2KTtcblxuICBmaWxlcyA9IGF3YWl0IGdsb2JieSgnYnVpbGQvZ2VuZXJhdGVkL2EqLmpzJyk7XG4gIGFzc2VydChmaWxlcy5sZW5ndGggPT09IG51bU9mRmlsZXMpO1xuXG4gIGZpbGVzID0gYXdhaXQgZ2xvYmJ5KCdidWlsZC9nZW5lcmF0ZWQvKi5lczcuanMnKTtcbiAgYXNzZXJ0KGZpbGVzLmxlbmd0aCA9PT0gMCk7XG59KTtcblxuZ3VscC50YXNrKFxuICAndGVzdC10cmFuc3BpbGUtbG90cy1vZi1maWxlcycsXG4gIGd1bHAuc2VyaWVzKCd0cmFuc3BpbGUtbG90cy1vZi1maWxlcycsICd0ZXN0LXRyYW5zcGlsZS1sb3RzLW9mLWVzNy1maWxlcycpXG4pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTTtFQUFDQyxVQUFEO0VBQWFDLFlBQWI7RUFBMkJDO0FBQTNCLElBQXdDSCxPQUFPLENBQUMsT0FBRCxDQUFyRDs7QUFDQSxNQUFNSSxDQUFDLEdBQUdKLE9BQU8sQ0FBQyxRQUFELENBQWpCOztBQUNBLE1BQU1LLENBQUMsR0FBR0wsT0FBTyxDQUFDLFVBQUQsQ0FBakI7O0FBQ0EsTUFBTTtFQUFDTTtBQUFELElBQVNOLE9BQU8sQ0FBQyxpQkFBRCxDQUF0Qjs7QUFDQSxNQUFNTyxNQUFNLEdBQUdQLE9BQU8sQ0FBQyxRQUFELENBQXRCOztBQUNBLE1BQU1RLEtBQUssR0FBR1IsT0FBTyxDQUFDLFlBQUQsQ0FBckI7O0FBQ0EsTUFBTVMsTUFBTSxHQUFHVCxPQUFPLENBQUMsU0FBRCxDQUF0Qjs7QUFDQSxNQUFNVSxNQUFNLEdBQUdWLE9BQU8sQ0FBQyxRQUFELENBQXRCOztBQUNBLE1BQU1XLE1BQU0sR0FBR04sQ0FBQyxDQUFDTyxTQUFGLENBQVlaLE9BQU8sQ0FBQyxRQUFELENBQW5CLENBQWY7QUFFQUUsWUFBWSxDQUFDVyxHQUFiLENBQWlCZCxJQUFqQjtBQUVBQSxJQUFJLENBQUNlLElBQUwsQ0FBVSx3QkFBVixFQUFvQyxrQkFBa0I7RUFDcEQsTUFBTUgsTUFBTSxDQUFDLG9DQUFELENBQVo7RUFDQSxNQUFNTCxJQUFJLENBQUMsT0FBRCxFQUFVLENBQUMsSUFBRCxFQUFPLG9CQUFQLENBQVYsQ0FBVjtFQUNBLE1BQU1ELENBQUMsQ0FBQ1UsR0FBRixDQUFNLENBQ1YsR0FBR1gsQ0FBQyxDQUFDWSxLQUFGLENBQVEsRUFBUixFQUFZQyxHQUFaLENBQWdCLFVBQVVDLENBQVYsRUFBYTtJQUM5QixPQUFPWixJQUFJLENBQUMsSUFBRCxFQUFPLENBQUMsZ0NBQUQsRUFBb0MsdUJBQXNCWSxDQUFDLEdBQUcsQ0FBRSxTQUFoRSxDQUFQLENBQVg7RUFDRCxDQUZFLENBRE8sQ0FBTixDQUFOO0FBS0QsQ0FSRDtBQVVBbkIsSUFBSSxDQUFDZSxJQUFMLENBQVUsNkJBQVYsRUFBeUMsWUFBWTtFQUNuRCxNQUFNSyxVQUFVLEdBQUcsSUFBSWxCLFVBQUosRUFBbkI7RUFDQSxPQUFPRixJQUFJLENBQ1JxQixHQURJLENBQ0EsNEJBREEsRUFFSkMsSUFGSSxDQUVDWixNQUFNLENBQUNOLFNBQVMsRUFBVixFQUFjSyxLQUFLLEVBQW5CLENBRlAsRUFHSmEsSUFISSxDQUdDRixVQUFVLENBQUNHLE1BQVgsRUFIRCxFQUlKQyxFQUpJLENBSUQsT0FKQyxFQUlRckIsWUFBWSxDQUFDc0IsV0FKckIsRUFLSkgsSUFMSSxDQUtDdEIsSUFBSSxDQUFDMEIsSUFBTCxDQUFVLGlCQUFWLENBTEQsQ0FBUDtBQU1ELENBUkQ7QUFVQTFCLElBQUksQ0FBQ2UsSUFBTCxDQUNFLHlCQURGLEVBRUVmLElBQUksQ0FBQzJCLE1BQUwsQ0FBWSx3QkFBWixFQUFzQyw2QkFBdEMsQ0FGRjtBQUtBM0IsSUFBSSxDQUFDZSxJQUFMLENBQVUsa0NBQVYsRUFBOEMsZUFBZWEsd0JBQWYsR0FBMEM7RUFDdEYsSUFBSUMsS0FBSyxHQUFHLE1BQU1sQixNQUFNLENBQUMsNEJBQUQsQ0FBeEI7RUFDQSxNQUFNbUIsVUFBVSxHQUFHRCxLQUFLLENBQUNFLE1BQXpCO0VBQ0F2QixNQUFNLENBQUNzQixVQUFVLEdBQUcsRUFBZCxDQUFOO0VBRUFELEtBQUssR0FBRyxNQUFNbEIsTUFBTSxDQUFDLHVCQUFELENBQXBCO0VBQ0FILE1BQU0sQ0FBQ3FCLEtBQUssQ0FBQ0UsTUFBTixLQUFpQkQsVUFBbEIsQ0FBTjtFQUVBRCxLQUFLLEdBQUcsTUFBTWxCLE1BQU0sQ0FBQywwQkFBRCxDQUFwQjtFQUNBSCxNQUFNLENBQUNxQixLQUFLLENBQUNFLE1BQU4sS0FBaUIsQ0FBbEIsQ0FBTjtBQUNELENBVkQ7QUFZQS9CLElBQUksQ0FBQ2UsSUFBTCxDQUNFLDhCQURGLEVBRUVmLElBQUksQ0FBQzJCLE1BQUwsQ0FBWSx5QkFBWixFQUF1QyxrQ0FBdkMsQ0FGRiJ9
