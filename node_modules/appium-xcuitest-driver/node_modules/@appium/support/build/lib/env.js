"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MANIFEST_RELATIVE_PATH = exports.MANIFEST_BASENAME = exports.DEFAULT_APPIUM_HOME = void 0;
exports.hasAppiumDependency = hasAppiumDependency;
exports.resolveManifestPath = exports.resolveAppiumHome = exports.readPackageInDir = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _os = require("os");

var _path = _interopRequireDefault(require("path"));

var _pkgDir = _interopRequireDefault(require("pkg-dir"));

var _readPkg = _interopRequireDefault(require("read-pkg"));

var _npm = require("./npm");

const DEFAULT_APPIUM_HOME = _path.default.resolve((0, _os.homedir)(), '.appium');

exports.DEFAULT_APPIUM_HOME = DEFAULT_APPIUM_HOME;
const MANIFEST_BASENAME = 'extensions.yaml';
exports.MANIFEST_BASENAME = MANIFEST_BASENAME;

const MANIFEST_RELATIVE_PATH = _path.default.join('node_modules', '.cache', 'appium', MANIFEST_BASENAME);

exports.MANIFEST_RELATIVE_PATH = MANIFEST_RELATIVE_PATH;

async function hasAppiumDependency(cwd) {
  let listResult;
  let resolved;
  let version;

  try {
    var _listResult$dependenc, _listResult, _listResult$dependenc2, _listResult$dependenc3, _listResult$dependenc4, _listResult2, _listResult2$dependen, _listResult2$dependen2;

    listResult = await _npm.npm.list(cwd, 'appium');
    resolved = (_listResult$dependenc = (_listResult = listResult) === null || _listResult === void 0 ? void 0 : (_listResult$dependenc2 = _listResult.dependencies) === null || _listResult$dependenc2 === void 0 ? void 0 : (_listResult$dependenc3 = _listResult$dependenc2.appium) === null || _listResult$dependenc3 === void 0 ? void 0 : _listResult$dependenc3.resolved) !== null && _listResult$dependenc !== void 0 ? _listResult$dependenc : '';
    version = (_listResult$dependenc4 = (_listResult2 = listResult) === null || _listResult2 === void 0 ? void 0 : (_listResult2$dependen = _listResult2.dependencies) === null || _listResult2$dependen === void 0 ? void 0 : (_listResult2$dependen2 = _listResult2$dependen.appium) === null || _listResult2$dependen2 === void 0 ? void 0 : _listResult2$dependen2.version) !== null && _listResult$dependenc4 !== void 0 ? _listResult$dependenc4 : '';
  } catch {
    try {
      var _ref, _pkg$dependencies$app, _pkg$dependencies, _pkg$devDependencies, _pkg$optionalDependen;

      const pkg = await readPackageInDir(cwd);
      version = resolved = (_ref = (_pkg$dependencies$app = pkg === null || pkg === void 0 ? void 0 : (_pkg$dependencies = pkg.dependencies) === null || _pkg$dependencies === void 0 ? void 0 : _pkg$dependencies.appium) !== null && _pkg$dependencies$app !== void 0 ? _pkg$dependencies$app : pkg === null || pkg === void 0 ? void 0 : (_pkg$devDependencies = pkg.devDependencies) === null || _pkg$devDependencies === void 0 ? void 0 : _pkg$devDependencies.appium) !== null && _ref !== void 0 ? _ref : pkg === null || pkg === void 0 ? void 0 : (_pkg$optionalDependen = pkg.optionalDependencies) === null || _pkg$optionalDependen === void 0 ? void 0 : _pkg$optionalDependen.appium;
    } catch {}
  }

  return Boolean(version && (!resolved || resolved && !resolved.startsWith('file:')) && !version.startsWith('1') && !version.startsWith('0'));
}

const readPackageInDir = _lodash.default.memoize(async function _readPackageInDir(cwd) {
  return await (0, _readPkg.default)({
    cwd,
    normalize: true
  });
});

exports.readPackageInDir = readPackageInDir;

const resolveAppiumHome = _lodash.default.memoize(async function _resolveAppiumHome(cwd = process.cwd()) {
  if (process.env.APPIUM_HOME) {
    return process.env.APPIUM_HOME;
  }

  if (!_path.default.isAbsolute(cwd)) {
    throw new TypeError('`cwd` parameter must be an absolute path');
  }

  let currentPkgDir;

  try {
    currentPkgDir = await (0, _pkgDir.default)(cwd);

    if (!currentPkgDir) {
      return DEFAULT_APPIUM_HOME;
    }
  } catch {
    return DEFAULT_APPIUM_HOME;
  }

  return (await hasAppiumDependency(currentPkgDir)) ? currentPkgDir : DEFAULT_APPIUM_HOME;
});

exports.resolveAppiumHome = resolveAppiumHome;

const resolveManifestPath = _lodash.default.memoize(async function _resolveManifestPath(appiumHome) {
  var _appiumHome;

  appiumHome = (_appiumHome = appiumHome) !== null && _appiumHome !== void 0 ? _appiumHome : await resolveAppiumHome();
  return _path.default.join(appiumHome, MANIFEST_RELATIVE_PATH);
});

exports.resolveManifestPath = resolveManifestPath;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJERUZBVUxUX0FQUElVTV9IT01FIiwicGF0aCIsInJlc29sdmUiLCJob21lZGlyIiwiTUFOSUZFU1RfQkFTRU5BTUUiLCJNQU5JRkVTVF9SRUxBVElWRV9QQVRIIiwiam9pbiIsImhhc0FwcGl1bURlcGVuZGVuY3kiLCJjd2QiLCJsaXN0UmVzdWx0IiwicmVzb2x2ZWQiLCJ2ZXJzaW9uIiwibnBtIiwibGlzdCIsImRlcGVuZGVuY2llcyIsImFwcGl1bSIsInBrZyIsInJlYWRQYWNrYWdlSW5EaXIiLCJkZXZEZXBlbmRlbmNpZXMiLCJvcHRpb25hbERlcGVuZGVuY2llcyIsIkJvb2xlYW4iLCJzdGFydHNXaXRoIiwiXyIsIm1lbW9pemUiLCJfcmVhZFBhY2thZ2VJbkRpciIsInJlYWRQa2ciLCJub3JtYWxpemUiLCJyZXNvbHZlQXBwaXVtSG9tZSIsIl9yZXNvbHZlQXBwaXVtSG9tZSIsInByb2Nlc3MiLCJlbnYiLCJBUFBJVU1fSE9NRSIsImlzQWJzb2x1dGUiLCJUeXBlRXJyb3IiLCJjdXJyZW50UGtnRGlyIiwicGtnRGlyIiwicmVzb2x2ZU1hbmlmZXN0UGF0aCIsIl9yZXNvbHZlTWFuaWZlc3RQYXRoIiwiYXBwaXVtSG9tZSJdLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9lbnYuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQHRzLWNoZWNrXG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHtob21lZGlyfSBmcm9tICdvcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBwa2dEaXIgZnJvbSAncGtnLWRpcic7XG5pbXBvcnQgcmVhZFBrZyBmcm9tICdyZWFkLXBrZyc7XG5pbXBvcnQge25wbX0gZnJvbSAnLi9ucG0nO1xuXG4vKipcbiAqIFBhdGggdG8gdGhlIGRlZmF1bHQgYEFQUElVTV9IT01FYCBkaXIgKGB+Ly5hcHBpdW1gKS5cbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCBERUZBVUxUX0FQUElVTV9IT01FID0gcGF0aC5yZXNvbHZlKGhvbWVkaXIoKSwgJy5hcHBpdW0nKTtcblxuLyoqXG4gKiBCYXNlbmFtZSBvZiBleHRlbnNpb24gbWFuaWZlc3QgZmlsZS5cbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCBNQU5JRkVTVF9CQVNFTkFNRSA9ICdleHRlbnNpb25zLnlhbWwnO1xuXG4vKipcbiAqIFJlbGF0aXZlIHBhdGggdG8gZXh0ZW5zaW9uIG1hbmlmZXN0IGZpbGUgZnJvbSBgQVBQSVVNX0hPTUVgLlxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0IE1BTklGRVNUX1JFTEFUSVZFX1BBVEggPSBwYXRoLmpvaW4oXG4gICdub2RlX21vZHVsZXMnLFxuICAnLmNhY2hlJyxcbiAgJ2FwcGl1bScsXG4gIE1BTklGRVNUX0JBU0VOQU1FXG4pO1xuXG4vKipcbiAqIFJldHVybnMgYHRydWVgIGlmIGFwcGl1bSBpcyBpbnN0YWxsZWQgYXMgYSBkZXBlbmRlbmN5IG9mIGEgbG9jYWwgcGFja2FnZSBhdCBgY3dkYC5cbiAqXG4gKiBUaGUgZm9sbG93aW5nIHNwZWNpYWwgY2FzZXMgYXJlIGNvbnNpZGVyZWQ6XG4gKlxuICogLSBJZiBgcmVzb2x2ZWRgIHN0YXJ0cyB3aXRoIGBmaWxlOmAsIHRoZW4gYGN3ZGAgbGlrZWx5IHBvaW50cyB0byBgYXBwaXVtLW1vbm9yZXBvYCwgYW5kIChmb3Igbm93KSB3ZSBleHBlY3QgYEFQUElVTV9IT01FYCB0byBiZSB0aGUgZGVmYXVsdC5cbiAqIC0gSWYgdGhlIGB2ZXJzaW9uYCBiZWdpbnMgd2l0aCBgMGAgb3IgYDFgLCB3ZSdyZSBsb29raW5nIGF0IGFuIG9sZCB2ZXJzaW9uIG9mIGBhcHBpdW1gIChub3QgdGhpcyBvbmUhKVxuICpcbiAqIE5vdGUgdGhhdCB3ZSBhcmUgX25vdF8gcGVyZm9ybWluZyB0aGUgY2hlY2sgXCJpcyB0aGUgY3VycmVudGx5IHJ1bm5pbmcgQXBwaXVtIHRoZSBzYW1lIG9uZSBhcyBmb3VuZCBpbiB0aGUgbGlzdCBvZiBkZXBlbmRlbmNpZXNcIiwgYmVjYXVzZSBJJ20gbm90IHN1cmUgaXQgYWN0dWFsbHkgbWF0dGVycyAoYXNzdW1pbmcgdGhlIHZlcnNpb25zIGFyZSBjb21wYXRpYmxlKS5cbiAqIFJlZ2FyZGxlc3Mgd2UgbWF5IHdhbnQgdG8gbWFrZSB0aGlzIG1vcmUgcm9idXN0IGluIHRoZSBmdXR1cmUsIGFzIHdlIGhpdCBlZGdlIGNhc2VzLlxuICpcbiAqIF9BbHNvXyBub3RlIHRoYXQgaWYgYGFwcGl1bWAgYXBwZWFycyBhcyBhIGRlcGVuZGVuY3kgaW4gYHBhY2thZ2UuanNvbmAgX2J1dCBpdCBpcyBub3QgeWV0IGluc3RhbGxlZF8gdGhpcyBmdW5jdGlvbiB3aWxsIHJlc29sdmUgYGZhbHNlYC4gIFRoaXMgbWF5IG5vdCBiZSBleGFjdGx5IHdoYXQgd2Ugd2FudC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY3dkXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn1cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhc0FwcGl1bURlcGVuZGVuY3koY3dkKSB7XG4gIC8qKlxuICAgKiBAdG9kbyB0eXBlIHRoaXNcbiAgICogQHR5cGUge29iamVjdH1cbiAgICovXG4gIGxldCBsaXN0UmVzdWx0O1xuICAvKiogQHR5cGUge3N0cmluZ3x1bmRlZmluZWR9ICovXG4gIGxldCByZXNvbHZlZDtcbiAgLyoqIEB0eXBlIHtzdHJpbmd8dW5kZWZpbmVkfSAqL1xuICBsZXQgdmVyc2lvbjtcbiAgdHJ5IHtcbiAgICBsaXN0UmVzdWx0ID0gYXdhaXQgbnBtLmxpc3QoY3dkLCAnYXBwaXVtJyk7XG4gICAgLy8gaWYgXCJyZXNvbHZlZFwiIGlzIGVtcHR5LCB0aGVuIGBhcHBpdW1gIGlzIGluIGRlcGVuZGVuY2llcywgYnV0IGBucG0gaW5zdGFsbGAgaGFzIG5vdCBiZWVuIHJ1bi5cbiAgICAvLyBpbiBvdGhlciB3b3JkcywgdGhpcyBmdW5jdGlvbiBjYW4gcmVzb2x2ZSBgdHJ1ZWAgZXZlbiBpZiBgcmVzb2x2ZWRgIGlzIGVtcHR5Li4uXG4gICAgcmVzb2x2ZWQgPSBsaXN0UmVzdWx0Py5kZXBlbmRlbmNpZXM/LmFwcGl1bT8ucmVzb2x2ZWQgPz8gJyc7XG4gICAgLy8gLi4uaG93ZXZlciwgaXQgY2Fubm90IGRvIHNvIHVubGVzcyBgdmVyc2lvbmAgaXMgbm9uZW1wdHkuXG4gICAgdmVyc2lvbiA9IGxpc3RSZXN1bHQ/LmRlcGVuZGVuY2llcz8uYXBwaXVtPy52ZXJzaW9uID8/ICcnO1xuICB9IGNhdGNoIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcGtnID0gYXdhaXQgcmVhZFBhY2thZ2VJbkRpcihjd2QpO1xuICAgICAgLy8gd2UncmUgb25seSBnb2luZyB0byBsb29rIGF0IHRoZXNlIHRocmVlIGZpZWxkcyBmb3Igbm93LCBidXQgd2UgY2FuIGNoYW5nZSBpdCBsYXRlciBpZiBuZWVkIGJlLlxuICAgICAgdmVyc2lvbiA9IHJlc29sdmVkID1cbiAgICAgICAgcGtnPy5kZXBlbmRlbmNpZXM/LmFwcGl1bSA/P1xuICAgICAgICBwa2c/LmRldkRlcGVuZGVuY2llcz8uYXBwaXVtID8/XG4gICAgICAgIHBrZz8ub3B0aW9uYWxEZXBlbmRlbmNpZXM/LmFwcGl1bTtcbiAgICB9IGNhdGNoIHt9XG4gIH1cbiAgcmV0dXJuIEJvb2xlYW4oXG4gICAgdmVyc2lvbiAmJlxuICAgICAgKCFyZXNvbHZlZCB8fCAocmVzb2x2ZWQgJiYgIXJlc29sdmVkLnN0YXJ0c1dpdGgoJ2ZpbGU6JykpKSAmJlxuICAgICAgLy8gZG9pbmcgYW55IGZ1cnRoZXIgY2hlY2tpbmcgaGVyZSBtYXkgYmUgYSBmb29sJ3MgZXJyYW5kLCBiZWNhdXNlIHlvdSBjYW4gcGluIHRoZSB2ZXJzaW9uXG4gICAgICAvLyB0byBhIF9sb3RfIG9mIGRpZmZlcmVudCB0aGluZ3MgKHRhZ3MsIFVSTHMsIGV0YykuXG4gICAgICAhdmVyc2lvbi5zdGFydHNXaXRoKCcxJykgJiZcbiAgICAgICF2ZXJzaW9uLnN0YXJ0c1dpdGgoJzAnKVxuICApO1xufVxuXG4vKipcbiAqIFJlYWQgYSBgcGFja2FnZS5qc29uYCBpbiBkaXIgYGN3ZGAuICBJZiBub25lIGZvdW5kLCByZXR1cm4gYHVuZGVmaW5lZGAuXG4gKi9cbmV4cG9ydCBjb25zdCByZWFkUGFja2FnZUluRGlyID0gXy5tZW1vaXplKFxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGN3ZCAtIERpcmVjdG9yeSBvc3RlbnNpYmx5IGhhdmluZyBhIGBwYWNrYWdlLmpzb25gXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGltcG9ydCgncmVhZC1wa2cnKS5Ob3JtYWxpemVkUGFja2FnZUpzb258dW5kZWZpbmVkPn1cbiAgICovXG4gIGFzeW5jIGZ1bmN0aW9uIF9yZWFkUGFja2FnZUluRGlyKGN3ZCkge1xuICAgIHJldHVybiBhd2FpdCByZWFkUGtnKHtjd2QsIG5vcm1hbGl6ZTogdHJ1ZX0pO1xuICB9XG4pO1xuXG4vKipcbiAqIERldGVybWluZXMgbG9jYXRpb24gb2YgQXBwaXVtJ3MgXCJob21lXCIgZGlyXG4gKlxuICogLSBJZiBgQVBQSVVNX0hPTUVgIGlzIHNldCBpbiB0aGUgZW52aXJvbm1lbnQsIHVzZSB0aGF0XG4gKiAtIElmIHdlIGhhdmUgYW4gYGV4dGVuc2lvbnMueWFtbGAgaW4ge0BsaW5rY29kZSBERUZBVUxUX0FQUElVTV9IT01FfSwgdGhlbiB1c2UgdGhhdC5cbiAqIC0gSWYgd2UgZmluZCBhIGBwYWNrYWdlLmpzb25gIGluIG9yIGFib3ZlIGBjd2RgIGFuZCB7QGxpbmtjb2RlIHNob3VsZFVzZUN3ZEZvckFwcGl1bUhvbWV9IHJldHVybnMgYHRydWVgLCB0aGVuIHVzZSB0aGUgZGlyZWN0b3J5IGNvbnRhaW5pbmcgdGhlIGBwYWNrYWdlLmpzb25gLlxuICovXG5leHBvcnQgY29uc3QgcmVzb2x2ZUFwcGl1bUhvbWUgPSBfLm1lbW9pemUoXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2N3ZF0gLSBDdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5LiAgX011c3RfIGJlIGFic29sdXRlLCBpZiBzcGVjaWZpZWQuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59XG4gICAqL1xuICBhc3luYyBmdW5jdGlvbiBfcmVzb2x2ZUFwcGl1bUhvbWUoY3dkID0gcHJvY2Vzcy5jd2QoKSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5BUFBJVU1fSE9NRSkge1xuICAgICAgcmV0dXJuIHByb2Nlc3MuZW52LkFQUElVTV9IT01FO1xuICAgIH1cblxuICAgIGlmICghcGF0aC5pc0Fic29sdXRlKGN3ZCkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2Bjd2RgIHBhcmFtZXRlciBtdXN0IGJlIGFuIGFic29sdXRlIHBhdGgnKTtcbiAgICB9XG5cbiAgICAvKiogQHR5cGUge3N0cmluZ3x1bmRlZmluZWR9ICovXG4gICAgbGV0IGN1cnJlbnRQa2dEaXI7XG5cbiAgICB0cnkge1xuICAgICAgY3VycmVudFBrZ0RpciA9IGF3YWl0IHBrZ0Rpcihjd2QpO1xuXG4gICAgICAvLyBpZiB3ZSBjYW4ndCBmaW5kIGEgYHBhY2thZ2UuanNvbmAsIHVzZSB0aGUgZGVmYXVsdFxuICAgICAgaWYgKCFjdXJyZW50UGtnRGlyKSB7XG4gICAgICAgIHJldHVybiBERUZBVUxUX0FQUElVTV9IT01FO1xuICAgICAgfVxuICAgIH0gY2F0Y2gge1xuICAgICAgLy8gdW5jbGVhciBpZiB0aGlzIGNhbiBhY3R1YWxseSBoYXBwZW5cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICByZXR1cm4gREVGQVVMVF9BUFBJVU1fSE9NRTtcbiAgICB9XG5cbiAgICByZXR1cm4gKGF3YWl0IGhhc0FwcGl1bURlcGVuZGVuY3koY3VycmVudFBrZ0RpcikpID8gY3VycmVudFBrZ0RpciA6IERFRkFVTFRfQVBQSVVNX0hPTUU7XG4gIH1cbik7XG5cbi8qKlxuICogRmlndXJlIG91dCBtYW5pZmVzdCBwYXRoIGJhc2VkIG9uIGBhcHBpdW1Ib21lYC5cbiAqXG4gKiBUaGUgYXNzdW1wdGlvbiBpcyB0aGF0LCBpZiBgYXBwaXVtSG9tZWAgaGFzIGJlZW4gcHJvdmlkZWQsIGl0IHdhcyByZXNvbHZlZCB2aWEge0BsaW5rIHJlc29sdmVBcHBpdW1Ib21lIGByZXNvbHZlQXBwaXVtSG9tZSgpYH0hICBJZiB1bnN1cmUsXG4gKiBkb24ndCBwYXNzIGEgcGFyYW1ldGVyIGFuZCBsZXQgYHJlc29sdmVBcHBpdW1Ib21lKClgIGhhbmRsZSBpdC5cbiAqL1xuZXhwb3J0IGNvbnN0IHJlc29sdmVNYW5pZmVzdFBhdGggPSBfLm1lbW9pemUoXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2FwcGl1bUhvbWVdIC0gQXBwaXVtIGhvbWUgZGlyZWN0b3J5XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59XG4gICAqL1xuICBhc3luYyBmdW5jdGlvbiBfcmVzb2x2ZU1hbmlmZXN0UGF0aChhcHBpdW1Ib21lKSB7XG4gICAgLy8gY2FuIHlvdSBcImF3YWl0XCIgaW4gYSBkZWZhdWx0IHBhcmFtZXRlcj8gaXMgdGhhdCBhIGdvb2QgaWRlYT9cbiAgICBhcHBpdW1Ib21lID0gYXBwaXVtSG9tZSA/PyAoYXdhaXQgcmVzb2x2ZUFwcGl1bUhvbWUoKSk7XG4gICAgcmV0dXJuIHBhdGguam9pbihhcHBpdW1Ib21lLCBNQU5JRkVTVF9SRUxBVElWRV9QQVRIKTtcbiAgfVxuKTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdyZWFkLXBrZycpLk5vcm1hbGl6ZWRQYWNrYWdlSnNvbn0gTm9ybWFsaXplZFBhY2thZ2VKc29uXG4gKi9cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQU1PLE1BQU1BLG1CQUFtQixHQUFHQyxhQUFBLENBQUtDLE9BQUwsQ0FBYSxJQUFBQyxXQUFBLEdBQWIsRUFBd0IsU0FBeEIsQ0FBNUI7OztBQU1BLE1BQU1DLGlCQUFpQixHQUFHLGlCQUExQjs7O0FBTUEsTUFBTUMsc0JBQXNCLEdB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