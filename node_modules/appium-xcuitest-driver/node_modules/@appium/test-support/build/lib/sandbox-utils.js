"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.verifySandbox = verifySandbox;
exports.withSandbox = withSandbox;

require("source-map-support/register");

var _sinon = _interopRequireDefault(require("sinon"));

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

let SANDBOX = Symbol();

function withSandbox(config, fn) {
  return () => {
    const S = {
      mocks: {},

      verify() {
        return this.sandbox.verify();
      }

    };
    beforeEach(function beforeEach() {
      S.sandbox = _sinon.default.createSandbox();
      S.sandbox.usingPromise(_bluebird.default);
      S.mocks[SANDBOX] = S.sandbox;

      for (let [key, value] of _lodash.default.toPairs(config.mocks)) {
        S.mocks[key] = S.sandbox.mock(value);
      }
    });
    afterEach(function afterEach() {
      S.sandbox.restore();

      for (let k of _lodash.default.keys(S.mocks)) {
        delete S.mocks[k];
      }

      delete S.mocks[SANDBOX];
    });
    fn(S);
  };
}

function verifySandbox(obj) {
  let sandbox = obj.sandbox ? obj.sandbox : obj[SANDBOX];
  sandbox.verify();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTQU5EQk9YIiwiU3ltYm9sIiwid2l0aFNhbmRib3giLCJjb25maWciLCJmbiIsIlMiLCJtb2NrcyIsInZlcmlmeSIsInNhbmRib3giLCJiZWZvcmVFYWNoIiwic2lub24iLCJjcmVhdGVTYW5kYm94IiwidXNpbmdQcm9taXNlIiwiQiIsImtleSIsInZhbHVlIiwiXyIsInRvUGFpcnMiLCJtb2NrIiwiYWZ0ZXJFYWNoIiwicmVzdG9yZSIsImsiLCJrZXlzIiwidmVyaWZ5U2FuZGJveCIsIm9iaiJdLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9zYW5kYm94LXV0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzaW5vbiBmcm9tICdzaW5vbic7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuXG5sZXQgU0FOREJPWCA9IFN5bWJvbCgpO1xuXG4vLyB1c2UgdGhpcyBvbmUgaWYgdXNpbmcgYSBtaXggb2YgbW9ja3Mvc3R1Yi9zcGllc1xuZnVuY3Rpb24gd2l0aFNhbmRib3goY29uZmlnLCBmbikge1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGNvbnN0IFMgPSB7XG4gICAgICBtb2Nrczoge30sXG4gICAgICB2ZXJpZnkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNhbmRib3gudmVyaWZ5KCk7XG4gICAgICB9LFxuICAgIH07XG4gICAgYmVmb3JlRWFjaChmdW5jdGlvbiBiZWZvcmVFYWNoKCkge1xuICAgICAgUy5zYW5kYm94ID0gc2lub24uY3JlYXRlU2FuZGJveCgpO1xuICAgICAgUy5zYW5kYm94LnVzaW5nUHJvbWlzZShCKTtcbiAgICAgIFMubW9ja3NbU0FOREJPWF0gPSBTLnNhbmRib3g7XG4gICAgICBmb3IgKGxldCBba2V5LCB2YWx1ZV0gb2YgXy50b1BhaXJzKGNvbmZpZy5tb2NrcykpIHtcbiAgICAgICAgUy5tb2Nrc1trZXldID0gUy5zYW5kYm94Lm1vY2sodmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGFmdGVyRWFjaChmdW5jdGlvbiBhZnRlckVhY2goKSB7XG4gICAgICBTLnNhbmRib3gucmVzdG9yZSgpO1xuICAgICAgZm9yIChsZXQgayBvZiBfLmtleXMoUy5tb2NrcykpIHtcbiAgICAgICAgZGVsZXRlIFMubW9ja3Nba107XG4gICAgICB9XG4gICAgICBkZWxldGUgUy5tb2Nrc1tTQU5EQk9YXTtcbiAgICB9KTtcbiAgICBmbihTKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdmVyaWZ5U2FuZGJveChvYmopIHtcbiAgbGV0IHNhbmRib3ggPSBvYmouc2FuZGJveCA/IG9iai5zYW5kYm94IDogb2JqW1NBTkRCT1hdO1xuICBzYW5kYm94LnZlcmlmeSgpO1xufVxuXG5leHBvcnQge3dpdGhTYW5kYm94LCB2ZXJpZnlTYW5kYm94fTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUEsSUFBSUEsT0FBTyxHQUFHQyxNQUFNLEVBQXBCOztBQUdBLFNBQVNDLFdBQVQsQ0FBcUJDLE1BQXJCLEVBQTZCQyxFQUE3QixFQUFpQztFQUMvQixPQUFPLE1BQU07SUFDWCxNQUFNQyxDQUFDLEdBQUc7TUFDUkMsS0FBSyxFQUFFLEVBREM7O01BRVJDLE1BQU0sR0FBRztRQUNQLE9BQU8sS0FBS0MsT0FBTCxDQUFhRCxNQUFiLEVBQVA7TUFDRDs7SUFKTyxDQUFWO0lBTUFFLFVBQVUsQ0FBQyxTQUFTQSxVQUFULEdBQXNCO01BQy9CSixDQUFDLENBQUNHLE9BQUYsR0FBWUUsY0FBQSxDQUFNQyxhQUFOLEVBQVo7TUFDQU4sQ0FBQyxDQUFDRyxPQUFGLENBQVVJLFlBQVYsQ0FBdUJDLGlCQUF2QjtNQUNBUixDQUFDLENBQUNDLEtBQUYsQ0FBUU4sT0FBUixJQUFtQkssQ0FBQyxDQUFDRyxPQUFyQjs7TUFDQSxLQUFLLElBQUksQ0FBQ00sR0FBRCxFQUFNQyxLQUFOLENBQVQsSUFBeUJDLGVBQUEsQ0FBRUMsT0FBRixDQUFVZCxNQUFNLENBQUNHLEtBQWpCLENBQXpCLEVBQWtEO1FBQ2hERCxDQUFDLENBQUNDLEtBQUYsQ0FBUVEsR0FBUixJQUFlVCxDQUFDLENBQUNHLE9BQUYsQ0FBVVUsSUFBVixDQUFlSCxLQUFmLENBQWY7TUFDRDtJQUNGLENBUFMsQ0FBVjtJQVFBSSxTQUFTLENBQUMsU0FBU0EsU0FBVCxHQUFxQjtNQUM3QmQsQ0FBQyxDQUFDRyxPQUFGLENBQVVZLE9BQVY7O01BQ0EsS0FBSyxJQUFJQyxDQUFULElBQWNMLGVBQUEsQ0FBRU0sSUFBRixDQUFPakIsQ0FBQyxDQUFDQyxLQUFULENBQWQsRUFBK0I7UUFDN0IsT0FBT0QsQ0FBQyxDQUFDQyxLQUFGLENBQVFlLENBQVIsQ0FBUDtNQUNEOztNQUNELE9BQU9oQixDQUFDLENBQUNDLEtBQUYsQ0FBUU4sT0FBUixDQUFQO0lBQ0QsQ0FOUSxDQUFUO0lBT0FJLEVBQUUsQ0FBQ0MsQ0FBRCxDQUFGO0VBQ0QsQ0F2QkQ7QUF3QkQ7O0FBRUQsU0FBU2tCLGFBQVQsQ0FBdUJDLEdBQXZCLEVBQTRCO0VBQzFCLElBQUloQixPQUFPLEdBQUdnQixHQUFHLENBQUNoQixPQUFKLEdBQWNnQixHQUFHLENBQUNoQixPQUFsQixHQUE0QmdCLEdBQUcsQ0FBQ3hCLE9BQUQsQ0FBN0M7RUFDQVEsT0FBTyxDQUFDRCxNQUFSO0FBQ0QifQ==