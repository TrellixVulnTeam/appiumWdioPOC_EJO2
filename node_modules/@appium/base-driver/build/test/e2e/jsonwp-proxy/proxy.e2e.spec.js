"use strict";

require("source-map-support/register");

var _lib = require("../../../lib");

var _fakeDriver = require("../protocol/fake-driver");

describe('proxy', function () {
  const jwproxy = new _lib.JWProxy();
  let baseServer;
  before(async function () {
    baseServer = await (0, _lib.server)({
      routeConfiguringFunction: (0, _lib.routeConfiguringFunction)(new _fakeDriver.FakeDriver()),
      port: 4444
    });
  });
  after(async function () {
    await baseServer.close();
  });
  it('should proxy status straight', async function () {
    let [res, resBody] = await jwproxy.proxy('/status', 'GET');
    res.statusCode.should.equal(200);
    resBody.value.should.equal(`I'm fine`);
  });
  it('should proxy status as command', async function () {
    const res = await jwproxy.command('/status', 'GET');
    res.should.eql(`I'm fine`);
  });
  describe('new session', function () {
    afterEach(async function () {
      await jwproxy.command('', 'DELETE');
    });
    it('should start a new session', async function () {
      const caps = {
        browserName: 'fake'
      };
      const res = await jwproxy.command('/session', 'POST', {
        capabilities: {
          alwaysMatch: caps
        }
      });
      res.capabilities.alwaysMatch.should.have.property('browserName');
      jwproxy.sessionId.should.have.length(48);
    });
  });
  describe('delete session', function () {
    beforeEach(async function () {
      await jwproxy.command('/session', 'POST', {
        desiredCapabilities: {}
      });
    });
    it('should quit a session', async function () {
      const res = await jwproxy.command('', 'DELETE');
      should.not.exist(res);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZXNjcmliZSIsImp3cHJveHkiLCJKV1Byb3h5IiwiYmFzZVNlcnZlciIsImJlZm9yZSIsInNlcnZlciIsInJvdXRlQ29uZmlndXJpbmdGdW5jdGlvbiIsIkZha2VEcml2ZXIiLCJwb3J0IiwiYWZ0ZXIiLCJjbG9zZSIsIml0IiwicmVzIiwicmVzQm9keSIsInByb3h5Iiwic3RhdHVzQ29kZSIsInNob3VsZCIsImVxdWFsIiwidmFsdWUiLCJjb21tYW5kIiwiZXFsIiwiYWZ0ZXJFYWNoIiwiY2FwcyIsImJyb3dzZXJOYW1lIiwiY2FwYWJpbGl0aWVzIiwiYWx3YXlzTWF0Y2giLCJoYXZlIiwicHJvcGVydHkiLCJzZXNzaW9uSWQiLCJsZW5ndGgiLCJiZWZvcmVFYWNoIiwiZGVzaXJlZENhcGFiaWxpdGllcyIsIm5vdCIsImV4aXN0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdGVzdC9lMmUvanNvbndwLXByb3h5L3Byb3h5LmUyZS5zcGVjLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SldQcm94eSwgc2VydmVyLCByb3V0ZUNvbmZpZ3VyaW5nRnVuY3Rpb259IGZyb20gJy4uLy4uLy4uL2xpYic7XG5pbXBvcnQge0Zha2VEcml2ZXJ9IGZyb20gJy4uL3Byb3RvY29sL2Zha2UtZHJpdmVyJztcblxuZGVzY3JpYmUoJ3Byb3h5JywgZnVuY3Rpb24gKCkge1xuICBjb25zdCBqd3Byb3h5ID0gbmV3IEpXUHJveHkoKTtcbiAgbGV0IGJhc2VTZXJ2ZXI7XG4gIGJlZm9yZShhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgYmFzZVNlcnZlciA9IGF3YWl0IHNlcnZlcih7XG4gICAgICByb3V0ZUNvbmZpZ3VyaW5nRnVuY3Rpb246IHJvdXRlQ29uZmlndXJpbmdGdW5jdGlvbihuZXcgRmFrZURyaXZlcigpKSxcbiAgICAgIHBvcnQ6IDQ0NDQsXG4gICAgfSk7XG4gIH0pO1xuICBhZnRlcihhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgYXdhaXQgYmFzZVNlcnZlci5jbG9zZSgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHByb3h5IHN0YXR1cyBzdHJhaWdodCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgW3JlcywgcmVzQm9keV0gPSBhd2FpdCBqd3Byb3h5LnByb3h5KCcvc3RhdHVzJywgJ0dFVCcpO1xuICAgIHJlcy5zdGF0dXNDb2RlLnNob3VsZC5lcXVhbCgyMDApO1xuICAgIHJlc0JvZHkudmFsdWUuc2hvdWxkLmVxdWFsKGBJJ20gZmluZWApO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBwcm94eSBzdGF0dXMgYXMgY29tbWFuZCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBqd3Byb3h5LmNvbW1hbmQoJy9zdGF0dXMnLCAnR0VUJyk7XG4gICAgcmVzLnNob3VsZC5lcWwoYEknbSBmaW5lYCk7XG4gIH0pO1xuICBkZXNjcmliZSgnbmV3IHNlc3Npb24nLCBmdW5jdGlvbiAoKSB7XG4gICAgYWZ0ZXJFYWNoKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGF3YWl0IGp3cHJveHkuY29tbWFuZCgnJywgJ0RFTEVURScpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgc3RhcnQgYSBuZXcgc2Vzc2lvbicsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGNhcHMgPSB7YnJvd3Nlck5hbWU6ICdmYWtlJ307XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBqd3Byb3h5LmNvbW1hbmQoJy9zZXNzaW9uJywgJ1BPU1QnLCB7XG4gICAgICAgIGNhcGFiaWxpdGllczoge2Fsd2F5c01hdGNoOiBjYXBzfSxcbiAgICAgIH0pO1xuICAgICAgcmVzLmNhcGFiaWxpdGllcy5hbHdheXNNYXRjaC5zaG91bGQuaGF2ZS5wcm9wZXJ0eSgnYnJvd3Nlck5hbWUnKTtcbiAgICAgIGp3cHJveHkuc2Vzc2lvbklkLnNob3VsZC5oYXZlLmxlbmd0aCg0OCk7XG4gICAgfSk7XG4gIH0pO1xuICBkZXNjcmliZSgnZGVsZXRlIHNlc3Npb24nLCBmdW5jdGlvbiAoKSB7XG4gICAgYmVmb3JlRWFjaChhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBhd2FpdCBqd3Byb3h5LmNvbW1hbmQoJy9zZXNzaW9uJywgJ1BPU1QnLCB7ZGVzaXJlZENhcGFiaWxpdGllczoge319KTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHF1aXQgYSBzZXNzaW9uJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgcmVzID0gYXdhaXQgandwcm94eS5jb21tYW5kKCcnLCAnREVMRVRFJyk7XG4gICAgICBzaG91bGQubm90LmV4aXN0KHJlcyk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFDQTs7QUFFQUEsUUFBUSxDQUFDLE9BQUQsRUFBVSxZQUFZO0VBQzVCLE1BQU1DLE9BQU8sR0FBRyxJQUFJQyxZQUFKLEVBQWhCO0VBQ0EsSUFBSUMsVUFBSjtFQUNBQyxNQUFNLENBQUMsa0JBQWtCO0lBQ3ZCRCxVQUFVLEdBQUcsTUFBTSxJQUFBRSxXQUFBLEVBQU87TUFDeEJDLHdCQUF3QixFQUFFLElBQUFBLDZCQUFBLEVBQXlCLElBQUlDLHNCQUFKLEVBQXpCLENBREY7TUFFeEJDLElBQUksRUFBRTtJQUZrQixDQUFQLENBQW5CO0VBSUQsQ0FMSyxDQUFOO0VBTUFDLEtBQUssQ0FBQyxrQkFBa0I7SUFDdEIsTUFBTU4sVUFBVSxDQUFDTyxLQUFYLEVBQU47RUFDRCxDQUZJLENBQUw7RUFJQUMsRUFBRSxDQUFDLDhCQUFELEVBQWlDLGtCQUFrQjtJQUNuRCxJQUFJLENBQUNDLEdBQUQsRUFBTUMsT0FBTixJQUFpQixNQUFNWixPQUFPLENBQUNhLEtBQVIsQ0FBYyxTQUFkLEVBQXlCLEtBQXpCLENBQTNCO0lBQ0FGLEdBQUcsQ0FBQ0csVUFBSixDQUFlQyxNQUFmLENBQXNCQyxLQUF0QixDQUE0QixHQUE1QjtJQUNBSixPQUFPLENBQUNLLEtBQVIsQ0FBY0YsTUFBZCxDQUFxQkMsS0FBckIsQ0FBNEIsVUFBNUI7RUFDRCxDQUpDLENBQUY7RUFLQU4sRUFBRSxDQUFDLGdDQUFELEVBQW1DLGtCQUFrQjtJQUNyRCxNQUFNQyxHQUFHLEdBQUcsTUFBTVgsT0FBTyxDQUFDa0IsT0FBUixDQUFnQixTQUFoQixFQUEyQixLQUEzQixDQUFsQjtJQUNBUCxHQUFHLENBQUNJLE1BQUosQ0FBV0ksR0FBWCxDQUFnQixVQUFoQjtFQUNELENBSEMsQ0FBRjtFQUlBcEIsUUFBUSxDQUFDLGFBQUQsRUFBZ0IsWUFBWTtJQUNsQ3FCLFNBQVMsQ0FBQyxrQkFBa0I7TUFDMUIsTUFBTXBCLE9BQU8sQ0FBQ2tCLE9BQVIsQ0FBZ0IsRUFBaEIsRUFBb0IsUUFBcEIsQ0FBTjtJQUNELENBRlEsQ0FBVDtJQUdBUixFQUFFLENBQUMsNEJBQUQsRUFBK0Isa0JBQWtCO01BQ2pELE1BQU1XLElBQUksR0FBRztRQUFDQyxXQUFXLEVBQUU7TUFBZCxDQUFiO01BQ0EsTUFBTVgsR0FBRyxHQUFHLE1BQU1YLE9BQU8sQ0FBQ2tCLE9BQVIsQ0FBZ0IsVUFBaEIsRUFBNEIsTUFBNUIsRUFBb0M7UUFDcERLLFlBQVksRUFBRTtVQUFDQyxXQUFXLEVBQUVIO1FBQWQ7TUFEc0MsQ0FBcEMsQ0FBbEI7TUFHQVYsR0FBRyxDQUFDWSxZQUFKLENBQWlCQyxXQUFqQixDQUE2QlQsTUFBN0IsQ0FBb0NVLElBQXBDLENBQXlDQyxRQUF6QyxDQUFrRCxhQUFsRDtNQUNBMUIsT0FBTyxDQUFDMkIsU0FBUixDQUFrQlosTUFBbEIsQ0FBeUJVLElBQXpCLENBQThCRyxNQUE5QixDQUFxQyxFQUFyQztJQUNELENBUEMsQ0FBRjtFQVFELENBWk8sQ0FBUjtFQWFBN0IsUUFBUSxDQUFDLGdCQUFELEVBQW1CLFlBQVk7SUFDckM4QixVQUFVLENBQUMsa0JBQWtCO01BQzNCLE1BQU03QixPQUFPLENBQUNrQixPQUFSLENBQWdCLFVBQWhCLEVBQTRCLE1BQTVCLEVBQW9DO1FBQUNZLG1CQUFtQixFQUFFO01BQXRCLENBQXBDLENBQU47SUFDRCxDQUZTLENBQVY7SUFHQXBCLEVBQUUsQ0FBQyx1QkFBRCxFQUEwQixrQkFBa0I7TUFDNUMsTUFBTUMsR0FBRyxHQUFHLE1BQU1YLE9BQU8sQ0FBQ2tCLE9BQVIsQ0FBZ0IsRUFBaEIsRUFBb0IsUUFBcEIsQ0FBbEI7TUFDQUgsTUFBTSxDQUFDZ0IsR0FBUCxDQUFXQyxLQUFYLENBQWlCckIsR0FBakI7SUFDRCxDQUhDLENBQUY7RUFJRCxDQVJPLENBQVI7QUFTRCxDQTVDTyxDQUFSIn0=