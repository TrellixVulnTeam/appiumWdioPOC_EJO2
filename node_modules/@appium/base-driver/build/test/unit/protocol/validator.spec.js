"use strict";

require("source-map-support/register");

var _validators = require("../../../lib/protocol/validators");

describe('Protocol', function () {
  describe('direct to driver', function () {
    describe('setUrl', function () {
      it('should fail when no url passed', function () {
        (() => {
          _validators.validators.setUrl();
        }).should.throw(/url/i);
      });
      it('should fail when given invalid url', function () {
        (() => {
          _validators.validators.setUrl('foo');
        }).should.throw(/url/i);
      });
      it('should succeed when given url starting with http', function () {
        (() => {
          _validators.validators.setUrl('http://appium.io');
        }).should.not.throw();
      });
      it('should succeed when given an android-like scheme', function () {
        (() => {
          _validators.validators.setUrl('content://contacts/people/1');
        }).should.not.throw();
      });
      it('should succeed with hyphens dots and plus chars in the scheme', function () {
        (() => {
          _validators.validators.setUrl('my-app.a+b://login');
        }).should.not.throw();
      });
      it('should succeed when given an about scheme', function () {
        (() => {
          _validators.validators.setUrl('about:blank');
        }).should.not.throw();
      });
      it('should succeed when given a data scheme', function () {
        (() => {
          _validators.validators.setUrl('data:text/html,<html></html>');
        }).should.not.throw();
      });
    });
    describe('implicitWait', function () {
      it('should fail when given no ms', function () {
        (() => {
          _validators.validators.implicitWait();
        }).should.throw(/ms/i);
      });
      it('should fail when given a non-numeric ms', function () {
        (() => {
          _validators.validators.implicitWait('five');
        }).should.throw(/ms/i);
      });
      it('should fail when given a negative ms', function () {
        (() => {
          _validators.validators.implicitWait(-1);
        }).should.throw(/ms/i);
      });
      it('should succeed when given an ms of 0', function () {
        (() => {
          _validators.validators.implicitWait(0);
        }).should.not.throw();
      });
      it('should succeed when given an ms greater than 0', function () {
        (() => {
          _validators.validators.implicitWait(100);
        }).should.not.throw();
      });
    });
    describe('asyncScriptTimeout', function () {
      it('should fail when given no ms', function () {
        (() => {
          _validators.validators.asyncScriptTimeout();
        }).should.throw(/ms/i);
      });
      it('should fail when given a non-numeric ms', function () {
        (() => {
          _validators.validators.asyncScriptTimeout('five');
        }).should.throw(/ms/i);
      });
      it('should fail when given a negative ms', function () {
        (() => {
          _validators.validators.asyncScriptTimeout(-1);
        }).should.throw(/ms/i);
      });
      it('should succeed when given an ms of 0', function () {
        (() => {
          _validators.validators.asyncScriptTimeout(0);
        }).should.not.throw();
      });
      it('should succeed when given an ms greater than 0', function () {
        (() => {
          _validators.validators.asyncScriptTimeout(100);
        }).should.not.throw();
      });
    });
    describe('clickCurrent', function () {
      it('should fail when given an invalid button', function () {
        (() => {
          _validators.validators.clickCurrent(4);
        }).should.throw(/0, 1, or 2/i);
      });
      it('should succeed when given a valid button', function () {
        (() => {
          _validators.validators.clickCurrent(0);
        }).should.not.throw();
        (() => {
          _validators.validators.clickCurrent(1);
        }).should.not.throw();
        (() => {
          _validators.validators.clickCurrent(2);
        }).should.not.throw();
      });
    });
    describe('setNetworkConnection', function () {
      it('should fail when given no type', function () {
        (() => {
          _validators.validators.setNetworkConnection();
        }).should.throw(/0, 1, 2, 4, 6/i);
      });
      it('should fail when given an invalid type', function () {
        (() => {
          _validators.validators.setNetworkConnection(8);
        }).should.throw(/0, 1, 2, 4, 6/i);
      });
      it('should succeed when given a valid type', function () {
        (() => {
          _validators.validators.setNetworkConnection(0);
        }).should.not.throw();
        (() => {
          _validators.validators.setNetworkConnection(1);
        }).should.not.throw();
        (() => {
          _validators.validators.setNetworkConnection(2);
        }).should.not.throw();
        (() => {
          _validators.validators.setNetworkConnection(4);
        }).should.not.throw();
        (() => {
          _validators.validators.setNetworkConnection(6);
        }).should.not.throw();
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZXNjcmliZSIsIml0IiwidmFsaWRhdG9ycyIsInNldFVybCIsInNob3VsZCIsInRocm93Iiwibm90IiwiaW1wbGljaXRXYWl0IiwiYXN5bmNTY3JpcHRUaW1lb3V0IiwiY2xpY2tDdXJyZW50Iiwic2V0TmV0d29ya0Nvbm5lY3Rpb24iXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi90ZXN0L3VuaXQvcHJvdG9jb2wvdmFsaWRhdG9yLnNwZWMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gdHJhbnNwaWxlOm1vY2hhXG5cbmltcG9ydCB7dmFsaWRhdG9yc30gZnJvbSAnLi4vLi4vLi4vbGliL3Byb3RvY29sL3ZhbGlkYXRvcnMnO1xuXG5kZXNjcmliZSgnUHJvdG9jb2wnLCBmdW5jdGlvbiAoKSB7XG4gIGRlc2NyaWJlKCdkaXJlY3QgdG8gZHJpdmVyJywgZnVuY3Rpb24gKCkge1xuICAgIGRlc2NyaWJlKCdzZXRVcmwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpdCgnc2hvdWxkIGZhaWwgd2hlbiBubyB1cmwgcGFzc2VkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAoKCkgPT4ge1xuICAgICAgICAgIHZhbGlkYXRvcnMuc2V0VXJsKCk7XG4gICAgICAgIH0pLnNob3VsZC50aHJvdygvdXJsL2kpO1xuICAgICAgfSk7XG4gICAgICBpdCgnc2hvdWxkIGZhaWwgd2hlbiBnaXZlbiBpbnZhbGlkIHVybCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgKCgpID0+IHtcbiAgICAgICAgICB2YWxpZGF0b3JzLnNldFVybCgnZm9vJyk7XG4gICAgICAgIH0pLnNob3VsZC50aHJvdygvdXJsL2kpO1xuICAgICAgfSk7XG4gICAgICBpdCgnc2hvdWxkIHN1Y2NlZWQgd2hlbiBnaXZlbiB1cmwgc3RhcnRpbmcgd2l0aCBodHRwJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAoKCkgPT4ge1xuICAgICAgICAgIHZhbGlkYXRvcnMuc2V0VXJsKCdodHRwOi8vYXBwaXVtLmlvJyk7XG4gICAgICAgIH0pLnNob3VsZC5ub3QudGhyb3coKTtcbiAgICAgIH0pO1xuICAgICAgaXQoJ3Nob3VsZCBzdWNjZWVkIHdoZW4gZ2l2ZW4gYW4gYW5kcm9pZC1saWtlIHNjaGVtZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgKCgpID0+IHtcbiAgICAgICAgICB2YWxpZGF0b3JzLnNldFVybCgnY29udGVudDovL2NvbnRhY3RzL3Blb3BsZS8xJyk7XG4gICAgICAgIH0pLnNob3VsZC5ub3QudGhyb3coKTtcbiAgICAgIH0pO1xuICAgICAgaXQoJ3Nob3VsZCBzdWNjZWVkIHdpdGggaHlwaGVucyBkb3RzIGFuZCBwbHVzIGNoYXJzIGluIHRoZSBzY2hlbWUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICgoKSA9PiB7XG4gICAgICAgICAgdmFsaWRhdG9ycy5zZXRVcmwoJ215LWFwcC5hK2I6Ly9sb2dpbicpO1xuICAgICAgICB9KS5zaG91bGQubm90LnRocm93KCk7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgc3VjY2VlZCB3aGVuIGdpdmVuIGFuIGFib3V0IHNjaGVtZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgKCgpID0+IHtcbiAgICAgICAgICB2YWxpZGF0b3JzLnNldFVybCgnYWJvdXQ6YmxhbmsnKTtcbiAgICAgICAgfSkuc2hvdWxkLm5vdC50aHJvdygpO1xuICAgICAgfSk7XG4gICAgICBpdCgnc2hvdWxkIHN1Y2NlZWQgd2hlbiBnaXZlbiBhIGRhdGEgc2NoZW1lJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAoKCkgPT4ge1xuICAgICAgICAgIHZhbGlkYXRvcnMuc2V0VXJsKCdkYXRhOnRleHQvaHRtbCw8aHRtbD48L2h0bWw+Jyk7XG4gICAgICAgIH0pLnNob3VsZC5ub3QudGhyb3coKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGRlc2NyaWJlKCdpbXBsaWNpdFdhaXQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpdCgnc2hvdWxkIGZhaWwgd2hlbiBnaXZlbiBubyBtcycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgKCgpID0+IHtcbiAgICAgICAgICB2YWxpZGF0b3JzLmltcGxpY2l0V2FpdCgpO1xuICAgICAgICB9KS5zaG91bGQudGhyb3coL21zL2kpO1xuICAgICAgfSk7XG4gICAgICBpdCgnc2hvdWxkIGZhaWwgd2hlbiBnaXZlbiBhIG5vbi1udW1lcmljIG1zJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAoKCkgPT4ge1xuICAgICAgICAgIHZhbGlkYXRvcnMuaW1wbGljaXRXYWl0KCdmaXZlJyk7XG4gICAgICAgIH0pLnNob3VsZC50aHJvdygvbXMvaSk7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgZmFpbCB3aGVuIGdpdmVuIGEgbmVnYXRpdmUgbXMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICgoKSA9PiB7XG4gICAgICAgICAgdmFsaWRhdG9ycy5pbXBsaWNpdFdhaXQoLTEpO1xuICAgICAgICB9KS5zaG91bGQudGhyb3coL21zL2kpO1xuICAgICAgfSk7XG4gICAgICBpdCgnc2hvdWxkIHN1Y2NlZWQgd2hlbiBnaXZlbiBhbiBtcyBvZiAwJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAoKCkgPT4ge1xuICAgICAgICAgIHZhbGlkYXRvcnMuaW1wbGljaXRXYWl0KDApO1xuICAgICAgICB9KS5zaG91bGQubm90LnRocm93KCk7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgc3VjY2VlZCB3aGVuIGdpdmVuIGFuIG1zIGdyZWF0ZXIgdGhhbiAwJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAoKCkgPT4ge1xuICAgICAgICAgIHZhbGlkYXRvcnMuaW1wbGljaXRXYWl0KDEwMCk7XG4gICAgICAgIH0pLnNob3VsZC5ub3QudGhyb3coKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGRlc2NyaWJlKCdhc3luY1NjcmlwdFRpbWVvdXQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpdCgnc2hvdWxkIGZhaWwgd2hlbiBnaXZlbiBubyBtcycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgKCgpID0+IHtcbiAgICAgICAgICB2YWxpZGF0b3JzLmFzeW5jU2NyaXB0VGltZW91dCgpO1xuICAgICAgICB9KS5zaG91bGQudGhyb3coL21zL2kpO1xuICAgICAgfSk7XG4gICAgICBpdCgnc2hvdWxkIGZhaWwgd2hlbiBnaXZlbiBhIG5vbi1udW1lcmljIG1zJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAoKCkgPT4ge1xuICAgICAgICAgIHZhbGlkYXRvcnMuYXN5bmNTY3JpcHRUaW1lb3V0KCdmaXZlJyk7XG4gICAgICAgIH0pLnNob3VsZC50aHJvdygvbXMvaSk7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgZmFpbCB3aGVuIGdpdmVuIGEgbmVnYXRpdmUgbXMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICgoKSA9PiB7XG4gICAgICAgICAgdmFsaWRhdG9ycy5hc3luY1NjcmlwdFRpbWVvdXQoLTEpO1xuICAgICAgICB9KS5zaG91bGQudGhyb3coL21zL2kpO1xuICAgICAgfSk7XG4gICAgICBpdCgnc2hvdWxkIHN1Y2NlZWQgd2hlbiBnaXZlbiBhbiBtcyBvZiAwJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAoKCkgPT4ge1xuICAgICAgICAgIHZhbGlkYXRvcnMuYXN5bmNTY3JpcHRUaW1lb3V0KDApO1xuICAgICAgICB9KS5zaG91bGQubm90LnRocm93KCk7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgc3VjY2VlZCB3aGVuIGdpdmVuIGFuIG1zIGdyZWF0ZXIgdGhhbiAwJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAoKCkgPT4ge1xuICAgICAgICAgIHZhbGlkYXRvcnMuYXN5bmNTY3JpcHRUaW1lb3V0KDEwMCk7XG4gICAgICAgIH0pLnNob3VsZC5ub3QudGhyb3coKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGRlc2NyaWJlKCdjbGlja0N1cnJlbnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpdCgnc2hvdWxkIGZhaWwgd2hlbiBnaXZlbiBhbiBpbnZhbGlkIGJ1dHRvbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgKCgpID0+IHtcbiAgICAgICAgICB2YWxpZGF0b3JzLmNsaWNrQ3VycmVudCg0KTtcbiAgICAgICAgfSkuc2hvdWxkLnRocm93KC8wLCAxLCBvciAyL2kpO1xuICAgICAgfSk7XG4gICAgICBpdCgnc2hvdWxkIHN1Y2NlZWQgd2hlbiBnaXZlbiBhIHZhbGlkIGJ1dHRvbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgKCgpID0+IHtcbiAgICAgICAgICB2YWxpZGF0b3JzLmNsaWNrQ3VycmVudCgwKTtcbiAgICAgICAgfSkuc2hvdWxkLm5vdC50aHJvdygpO1xuICAgICAgICAoKCkgPT4ge1xuICAgICAgICAgIHZhbGlkYXRvcnMuY2xpY2tDdXJyZW50KDEpO1xuICAgICAgICB9KS5zaG91bGQubm90LnRocm93KCk7XG4gICAgICAgICgoKSA9PiB7XG4gICAgICAgICAgdmFsaWRhdG9ycy5jbGlja0N1cnJlbnQoMik7XG4gICAgICAgIH0pLnNob3VsZC5ub3QudGhyb3coKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGRlc2NyaWJlKCdzZXROZXR3b3JrQ29ubmVjdGlvbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGl0KCdzaG91bGQgZmFpbCB3aGVuIGdpdmVuIG5vIHR5cGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICgoKSA9PiB7XG4gICAgICAgICAgdmFsaWRhdG9ycy5zZXROZXR3b3JrQ29ubmVjdGlvbigpO1xuICAgICAgICB9KS5zaG91bGQudGhyb3coLzAsIDEsIDIsIDQsIDYvaSk7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgZmFpbCB3aGVuIGdpdmVuIGFuIGludmFsaWQgdHlwZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgKCgpID0+IHtcbiAgICAgICAgICB2YWxpZGF0b3JzLnNldE5ldHdvcmtDb25uZWN0aW9uKDgpO1xuICAgICAgICB9KS5zaG91bGQudGhyb3coLzAsIDEsIDIsIDQsIDYvaSk7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgc3VjY2VlZCB3aGVuIGdpdmVuIGEgdmFsaWQgdHlwZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgKCgpID0+IHtcbiAgICAgICAgICB2YWxpZGF0b3JzLnNldE5ldHdvcmtDb25uZWN0aW9uKDApO1xuICAgICAgICB9KS5zaG91bGQubm90LnRocm93KCk7XG4gICAgICAgICgoKSA9PiB7XG4gICAgICAgICAgdmFsaWRhdG9ycy5zZXROZXR3b3JrQ29ubmVjdGlvbigxKTtcbiAgICAgICAgfSkuc2hvdWxkLm5vdC50aHJvdygpO1xuICAgICAgICAoKCkgPT4ge1xuICAgICAgICAgIHZhbGlkYXRvcnMuc2V0TmV0d29ya0Nvbm5lY3Rpb24oMik7XG4gICAgICAgIH0pLnNob3VsZC5ub3QudGhyb3coKTtcbiAgICAgICAgKCgpID0+IHtcbiAgICAgICAgICB2YWxpZGF0b3JzLnNldE5ldHdvcmtDb25uZWN0aW9uKDQpO1xuICAgICAgICB9KS5zaG91bGQubm90LnRocm93KCk7XG4gICAgICAgICgoKSA9PiB7XG4gICAgICAgICAgdmFsaWRhdG9ycy5zZXROZXR3b3JrQ29ubmVjdGlvbig2KTtcbiAgICAgICAgfSkuc2hvdWxkLm5vdC50aHJvdygpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7QUFFQTs7QUFFQUEsUUFBUSxDQUFDLFVBQUQsRUFBYSxZQUFZO0VBQy9CQSxRQUFRLENBQUMsa0JBQUQsRUFBcUIsWUFBWTtJQUN2Q0EsUUFBUSxDQUFDLFFBQUQsRUFBVyxZQUFZO01BQzdCQyxFQUFFLENBQUMsZ0NBQUQsRUFBbUMsWUFBWTtRQUMvQyxDQUFDLE1BQU07VUFDTEMsc0JBQUEsQ0FBV0MsTUFBWDtRQUNELENBRkQsRUFFR0MsTUFGSCxDQUVVQyxLQUZWLENBRWdCLE1BRmhCO01BR0QsQ0FKQyxDQUFGO01BS0FKLEVBQUUsQ0FBQyxvQ0FBRCxFQUF1QyxZQUFZO1FBQ25E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