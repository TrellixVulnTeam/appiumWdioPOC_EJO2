"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _constants = require("../../../lib/constants");

var _protocolConverter = _interopRequireWildcard(require("../../../lib/jsonwp-proxy/protocol-converter"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const {
  MJSONWP,
  W3C
} = _constants.PROTOCOLS;
describe('Protocol Converter', function () {
  describe('getTimeoutRequestObjects', function () {
    let converter;
    before(function () {
      converter = new _protocolConverter.default(_lodash.default.noop);
    });
    it('should take W3C inputs and produce MJSONWP compatible objects', function () {
      converter.downstreamProtocol = MJSONWP;
      let timeoutObjects = converter.getTimeoutRequestObjects({
        script: 100
      });
      timeoutObjects.length.should.equal(1);
      timeoutObjects[0].should.eql({
        type: 'script',
        ms: 100
      });
    });
    it('should ignore invalid entries while converting from W3C', function () {
      converter.downstreamProtocol = MJSONWP;
      let timeoutObjects = converter.getTimeoutRequestObjects({
        script: 100,
        sessionId: '5432a4f3-cd89-4781-8905-ea9d3150840c',
        bar: -1,
        baz: undefined
      });
      timeoutObjects.length.should.equal(1);
      timeoutObjects[0].should.eql({
        type: 'script',
        ms: 100
      });
    });
    it('should take multiple W3C timeouts and produce multiple MJSONWP compatible objects', function () {
      converter.downstreamProtocol = MJSONWP;
      let [scriptTimeout, pageLoadTimeout, implicitTimeout] = converter.getTimeoutRequestObjects({
        script: 100,
        pageLoad: 200,
        implicit: 300
      });
      scriptTimeout.should.eql({
        type: 'script',
        ms: 100
      });
      pageLoadTimeout.should.eql({
        type: 'page load',
        ms: 200
      });
      implicitTimeout.should.eql({
        type: 'implicit',
        ms: 300
      });
    });
    it('should take MJSONWP input and produce W3C compatible object', function () {
      converter.downstreamProtocol = W3C;
      let timeoutObjects = converter.getTimeoutRequestObjects({
        type: 'implicit',
        ms: 300
      });
      timeoutObjects.length.should.equal(1);
      timeoutObjects[0].should.eql({
        implicit: 300
      });
    });
    it('should not change the input if protocol name is unknown', function () {
      converter.downstreamProtocol = null;
      let timeoutObjects = converter.getTimeoutRequestObjects({
        type: 'implicit',
        ms: 300
      });
      timeoutObjects.length.should.equal(1);
      timeoutObjects[0].should.eql({
        type: 'implicit',
        ms: 300
      });
    });
    it('should not change the input if protocol name is unchanged', function () {
      converter.downstreamProtocol = MJSONWP;
      let timeoutObjects = converter.getTimeoutRequestObjects({
        type: 'implicit',
        ms: 300
      });
      timeoutObjects.length.should.equal(1);
      timeoutObjects[0].should.eql({
        type: 'implicit',
        ms: 300
      });
    });
  });
  describe('setValue', function () {
    let converter;
    let responseBody;
    before(function () {
      responseBody = null;
      converter = new _protocolConverter.default((url, method, body) => {
        responseBody = body;
      });
    });
    beforeEach(function () {
      responseBody = {};
    });
    it('should calculate value if not present', async function () {
      await converter.proxySetValue('', '', {
        text: 'bla'
      });
      responseBody.should.eql({
        text: 'bla',
        value: ['b', 'l', 'a']
      });
    });
    it('should calculate text if not present', async function () {
      await converter.proxySetValue('', '', {
        value: ['b', 'l', 'a']
      });
      responseBody.should.eql({
        text: 'bla',
        value: ['b', 'l', 'a']
      });
    });
    it('should keep the response body unchanged if both value and text are present', async function () {
      await converter.proxySetValue('', '', {
        text: 'bla',
        value: ['b', 'l', 'a']
      });
      responseBody.should.eql({
        text: 'bla',
        value: ['b', 'l', 'a']
      });
    });
  });
  describe('getProperty', function () {
    let jsonwpConverter, w3cConverter;
    before(function () {
      for (let command of _protocolConverter.COMMAND_URLS_CONFLICTS) {
        if (command.commandNames.includes('getProperty')) {
          jsonwpConverter = command.jsonwpConverter;
          w3cConverter = command.w3cConverter;
        }
      }
    });
    it('should convert "property/value" to "attribute/value"', function () {
      jsonwpConverter('/session/123/element/456/property/value').should.equal('/session/123/element/456/attribute/value');
    });
    it('should convert "property/:somePropName" to "attribute/:somePropName"', function () {
      jsonwpConverter('/session/123/element/456/property/somePropName').should.equal('/session/123/element/456/attribute/somePropName');
    });
    it('should not convert from JSONWP to W3C', function () {
      w3cConverter('/session/123/element/456/attribute/someAttr').should.equal('/session/123/element/456/attribute/someAttr');
      w3cConverter('/session/123/element/456/property/someProp').should.equal('/session/123/element/456/property/someProp');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNSlNPTldQIiwiVzNDIiwiUFJPVE9DT0xTIiwiZGVzY3JpYmUiLCJjb252ZXJ0ZXIiLCJiZWZvcmUiLCJQcm90b2NvbENvbnZlcnRlciIsIl8iLCJub29wIiwiaXQiLCJkb3duc3RyZWFtUHJvdG9jb2wiLCJ0aW1lb3V0T2JqZWN0cyIsImdldFRpbWVvdXRSZXF1ZXN0T2JqZWN0cyIsInNjcmlwdCIsImxlbmd0aCIsInNob3VsZCIsImVxdWFsIiwiZXFsIiwidHlwZSIsIm1zIiwic2Vzc2lvbklkIiwiYmFyIiwiYmF6IiwidW5kZWZpbmVkIiwic2NyaXB0VGltZW91dCIsInBhZ2VMb2FkVGltZW91dCIsImltcGxpY2l0VGltZW91dCIsInBhZ2VMb2FkIiwiaW1wbGljaXQiLCJyZXNwb25zZUJvZHkiLCJ1cmwiLCJtZXRob2QiLCJib2R5IiwiYmVmb3JlRWFjaCIsInByb3h5U2V0VmFsdWUiLCJ0ZXh0IiwidmFsdWUiLCJqc29ud3BDb252ZXJ0ZXIiLCJ3M2NDb252ZXJ0ZXIiLCJjb21tYW5kIiwiQ09NTUFORF9VUkxTX0NPTkZMSUNUUyIsImNvbW1hbmROYW1lcyIsImluY2x1ZGVzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdGVzdC91bml0L2pzb253cC1wcm94eS9wcm90b2NvbC1jb252ZXJ0ZXIuc3BlYy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHtQUk9UT0NPTFN9IGZyb20gJy4uLy4uLy4uL2xpYi9jb25zdGFudHMnO1xuaW1wb3J0IFByb3RvY29sQ29udmVydGVyLCB7XG4gIENPTU1BTkRfVVJMU19DT05GTElDVFMsXG59IGZyb20gJy4uLy4uLy4uL2xpYi9qc29ud3AtcHJveHkvcHJvdG9jb2wtY29udmVydGVyJztcblxuY29uc3Qge01KU09OV1AsIFczQ30gPSBQUk9UT0NPTFM7XG5cbmRlc2NyaWJlKCdQcm90b2NvbCBDb252ZXJ0ZXInLCBmdW5jdGlvbiAoKSB7XG4gIGRlc2NyaWJlKCdnZXRUaW1lb3V0UmVxdWVzdE9iamVjdHMnLCBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGNvbnZlcnRlcjtcbiAgICBiZWZvcmUoZnVuY3Rpb24gKCkge1xuICAgICAgY29udmVydGVyID0gbmV3IFByb3RvY29sQ29udmVydGVyKF8ubm9vcCk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCB0YWtlIFczQyBpbnB1dHMgYW5kIHByb2R1Y2UgTUpTT05XUCBjb21wYXRpYmxlIG9iamVjdHMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjb252ZXJ0ZXIuZG93bnN0cmVhbVByb3RvY29sID0gTUpTT05XUDtcbiAgICAgIGxldCB0aW1lb3V0T2JqZWN0cyA9IGNvbnZlcnRlci5nZXRUaW1lb3V0UmVxdWVzdE9iamVjdHMoe3NjcmlwdDogMTAwfSk7XG4gICAgICB0aW1lb3V0T2JqZWN0cy5sZW5ndGguc2hvdWxkLmVxdWFsKDEpO1xuICAgICAgdGltZW91dE9iamVjdHNbMF0uc2hvdWxkLmVxbCh7dHlwZTogJ3NjcmlwdCcsIG1zOiAxMDB9KTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIGlnbm9yZSBpbnZhbGlkIGVudHJpZXMgd2hpbGUgY29udmVydGluZyBmcm9tIFczQycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnZlcnRlci5kb3duc3RyZWFtUHJvdG9jb2wgPSBNSlNPTldQO1xuICAgICAgbGV0IHRpbWVvdXRPYmplY3RzID0gY29udmVydGVyLmdldFRpbWVvdXRSZXF1ZXN0T2JqZWN0cyh7XG4gICAgICAgIHNjcmlwdDogMTAwLFxuICAgICAgICBzZXNzaW9uSWQ6ICc1NDMyYTRmMy1jZDg5LTQ3ODEtODkwNS1lYTlkMzE1MDg0MGMnLFxuICAgICAgICBiYXI6IC0xLFxuICAgICAgICBiYXo6IHVuZGVmaW5lZCxcbiAgICAgIH0pO1xuICAgICAgdGltZW91dE9iamVjdHMubGVuZ3RoLnNob3VsZC5lcXVhbCgxKTtcbiAgICAgIHRpbWVvdXRPYmplY3RzWzBdLnNob3VsZC5lcWwoe3R5cGU6ICdzY3JpcHQnLCBtczogMTAwfSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCB0YWtlIG11bHRpcGxlIFczQyB0aW1lb3V0cyBhbmQgcHJvZHVjZSBtdWx0aXBsZSBNSlNPTldQIGNvbXBhdGlibGUgb2JqZWN0cycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnZlcnRlci5kb3duc3RyZWFtUHJvdG9jb2wgPSBNSlNPTldQO1xuICAgICAgbGV0IFtzY3JpcHRUaW1lb3V0LCBwYWdlTG9hZFRpbWVvdXQsIGltcGxpY2l0VGltZW91dF0gPSBjb252ZXJ0ZXIuZ2V0VGltZW91dFJlcXVlc3RPYmplY3RzKHtcbiAgICAgICAgc2NyaXB0OiAxMDAsXG4gICAgICAgIHBhZ2VMb2FkOiAyMDAsXG4gICAgICAgIGltcGxpY2l0OiAzMDAsXG4gICAgICB9KTtcbiAgICAgIHNjcmlwdFRpbWVvdXQuc2hvdWxkLmVxbCh7XG4gICAgICAgIHR5cGU6ICdzY3JpcHQnLFxuICAgICAgICBtczogMTAwLFxuICAgICAgfSk7XG4gICAgICBwYWdlTG9hZFRpbWVvdXQuc2hvdWxkLmVxbCh7XG4gICAgICAgIHR5cGU6ICdwYWdlIGxvYWQnLFxuICAgICAgICBtczogMjAwLFxuICAgICAgfSk7XG4gICAgICBpbXBsaWNpdFRpbWVvdXQuc2hvdWxkLmVxbCh7XG4gICAgICAgIHR5cGU6ICdpbXBsaWNpdCcsXG4gICAgICAgIG1zOiAzMDAsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHRha2UgTUpTT05XUCBpbnB1dCBhbmQgcHJvZHVjZSBXM0MgY29tcGF0aWJsZSBvYmplY3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjb252ZXJ0ZXIuZG93bnN0cmVhbVByb3RvY29sID0gVzNDO1xuICAgICAgbGV0IHRpbWVvdXRPYmplY3RzID0gY29udmVydGVyLmdldFRpbWVvdXRSZXF1ZXN0T2JqZWN0cyh7XG4gICAgICAgIHR5cGU6ICdpbXBsaWNpdCcsXG4gICAgICAgIG1zOiAzMDAsXG4gICAgICB9KTtcbiAgICAgIHRpbWVvdXRPYmplY3RzLmxlbmd0aC5zaG91bGQuZXF1YWwoMSk7XG4gICAgICB0aW1lb3V0T2JqZWN0c1swXS5zaG91bGQuZXFsKHtpbXBsaWNpdDogMzAwfSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBub3QgY2hhbmdlIHRoZSBpbnB1dCBpZiBwcm90b2NvbCBuYW1lIGlzIHVua25vd24nLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjb252ZXJ0ZXIuZG93bnN0cmVhbVByb3RvY29sID0gbnVsbDtcbiAgICAgIGxldCB0aW1lb3V0T2JqZWN0cyA9IGNvbnZlcnRlci5nZXRUaW1lb3V0UmVxdWVzdE9iamVjdHMoe1xuICAgICAgICB0eXBlOiAnaW1wbGljaXQnLFxuICAgICAgICBtczogMzAwLFxuICAgICAgfSk7XG4gICAgICB0aW1lb3V0T2JqZWN0cy5sZW5ndGguc2hvdWxkLmVxdWFsKDEpO1xuICAgICAgdGltZW91dE9iamVjdHNbMF0uc2hvdWxkLmVxbCh7dHlwZTogJ2ltcGxpY2l0JywgbXM6IDMwMH0pO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgbm90IGNoYW5nZSB0aGUgaW5wdXQgaWYgcHJvdG9jb2wgbmFtZSBpcyB1bmNoYW5nZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjb252ZXJ0ZXIuZG93bnN0cmVhbVByb3RvY29sID0gTUpTT05XUDtcbiAgICAgIGxldCB0aW1lb3V0T2JqZWN0cyA9IGNvbnZlcnRlci5nZXRUaW1lb3V0UmVxdWVzdE9iamVjdHMoe1xuICAgICAgICB0eXBlOiAnaW1wbGljaXQnLFxuICAgICAgICBtczogMzAwLFxuICAgICAgfSk7XG4gICAgICB0aW1lb3V0T2JqZWN0cy5sZW5ndGguc2hvdWxkLmVxdWFsKDEpO1xuICAgICAgdGltZW91dE9iamVjdHNbMF0uc2hvdWxkLmVxbCh7dHlwZTogJ2ltcGxpY2l0JywgbXM6IDMwMH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnc2V0VmFsdWUnLCBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGNvbnZlcnRlcjtcbiAgICBsZXQgcmVzcG9uc2VCb2R5O1xuICAgIGJlZm9yZShmdW5jdGlvbiAoKSB7XG4gICAgICByZXNwb25zZUJvZHkgPSBudWxsO1xuICAgICAgY29udmVydGVyID0gbmV3IFByb3RvY29sQ29udmVydGVyKCh1cmwsIG1ldGhvZCwgYm9keSkgPT4ge1xuICAgICAgICByZXNwb25zZUJvZHkgPSBib2R5O1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgYmVmb3JlRWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICByZXNwb25zZUJvZHkgPSB7fTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY2FsY3VsYXRlIHZhbHVlIGlmIG5vdCBwcmVzZW50JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgYXdhaXQgY29udmVydGVyLnByb3h5U2V0VmFsdWUoJycsICcnLCB7XG4gICAgICAgIHRleHQ6ICdibGEnLFxuICAgICAgfSk7XG4gICAgICByZXNwb25zZUJvZHkuc2hvdWxkLmVxbCh7XG4gICAgICAgIHRleHQ6ICdibGEnLFxuICAgICAgICB2YWx1ZTogWydiJywgJ2wnLCAnYSddLFxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBjYWxjdWxhdGUgdGV4dCBpZiBub3QgcHJlc2VudCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGF3YWl0IGNvbnZlcnRlci5wcm94eVNldFZhbHVlKCcnLCAnJywge1xuICAgICAgICB2YWx1ZTogWydiJywgJ2wnLCAnYSddLFxuICAgICAgfSk7XG4gICAgICByZXNwb25zZUJvZHkuc2hvdWxkLmVxbCh7XG4gICAgICAgIHRleHQ6ICdibGEnLFxuICAgICAgICB2YWx1ZTogWydiJywgJ2wnLCAnYSddLFxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBrZWVwIHRoZSByZXNwb25zZSBib2R5IHVuY2hhbmdlZCBpZiBib3RoIHZhbHVlIGFuZCB0ZXh0IGFyZSBwcmVzZW50JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgYXdhaXQgY29udmVydGVyLnByb3h5U2V0VmFsdWUoJycsICcnLCB7XG4gICAgICAgIHRleHQ6ICdibGEnLFxuICAgICAgICB2YWx1ZTogWydiJywgJ2wnLCAnYSddLFxuICAgICAgfSk7XG4gICAgICByZXNwb25zZUJvZHkuc2hvdWxkLmVxbCh7XG4gICAgICAgIHRleHQ6ICdibGEnLFxuICAgICAgICB2YWx1ZTogWydiJywgJ2wnLCAnYSddLFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuICBkZXNjcmliZSgnZ2V0UHJvcGVydHknLCBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGpzb253cENvbnZlcnRlciwgdzNjQ29udmVydGVyO1xuICAgIGJlZm9yZShmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKGxldCBjb21tYW5kIG9mIENPTU1BTkRfVVJMU19DT05GTElDVFMpIHtcbiAgICAgICAgaWYgKGNvbW1hbmQuY29tbWFuZE5hbWVzLmluY2x1ZGVzKCdnZXRQcm9wZXJ0eScpKSB7XG4gICAgICAgICAganNvbndwQ29udmVydGVyID0gY29tbWFuZC5qc29ud3BDb252ZXJ0ZXI7XG4gICAgICAgICAgdzNjQ29udmVydGVyID0gY29tbWFuZC53M2NDb252ZXJ0ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIGNvbnZlcnQgXCJwcm9wZXJ0eS92YWx1ZVwiIHRvIFwiYXR0cmlidXRlL3ZhbHVlXCInLCBmdW5jdGlvbiAoKSB7XG4gICAgICBqc29ud3BDb252ZXJ0ZXIoJy9zZXNzaW9uLzEyMy9lbGVtZW50LzQ1Ni9wcm9wZXJ0eS92YWx1ZScpLnNob3VsZC5lcXVhbChcbiAgICAgICAgJy9zZXNzaW9uLzEyMy9lbGVtZW50LzQ1Ni9hdHRyaWJ1dGUvdmFsdWUnXG4gICAgICApO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgY29udmVydCBcInByb3BlcnR5Lzpzb21lUHJvcE5hbWVcIiB0byBcImF0dHJpYnV0ZS86c29tZVByb3BOYW1lXCInLCBmdW5jdGlvbiAoKSB7XG4gICAgICBqc29ud3BDb252ZXJ0ZXIoJy9zZXNzaW9uLzEyMy9lbGVtZW50LzQ1Ni9wcm9wZXJ0eS9zb21lUHJvcE5hbWUnKS5zaG91bGQuZXF1YWwoXG4gICAgICAgICcvc2Vzc2lvbi8xMjMvZWxlbWVudC80NTYvYXR0cmlidXRlL3NvbWVQcm9wTmFtZSdcbiAgICAgICk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBub3QgY29udmVydCBmcm9tIEpTT05XUCB0byBXM0MnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB3M2NDb252ZXJ0ZXIoJy9zZXNzaW9uLzEyMy9lbGVtZW50LzQ1Ni9hdHRyaWJ1dGUvc29tZUF0dHInKS5zaG91bGQuZXF1YWwoXG4gICAgICAgICcvc2Vzc2lvbi8xMjMvZWxlbWVudC80NTYvYXR0cmlidXRlL3NvbWVBdHRyJ1xuICAgICAgKTtcbiAgICAgIHczY0NvbnZlcnRlcignL3Nlc3Npb24vMTIzL2VsZW1lbnQvNDU2L3Byb3BlcnR5L3NvbWVQcm9wJykuc2hvdWxkLmVxdWFsKFxuICAgICAgICAnL3Nlc3Npb24vMTIzL2VsZW1lbnQvNDU2L3Byb3BlcnR5L3NvbWVQcm9wJ1xuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7OztBQUlBLE1BQU07RUFBQ0EsT0FBRDtFQUFVQztBQUFWLElBQWlCQyxvQkFBdkI7QUFFQUMsUUFBUSxDQUFDLG9CQUFELEVBQXVCLFlBQVk7RUFDekNBLFFBQVEsQ0FBQywwQkFBRCxFQUE2QixZQUFZO0lBQy9DLElBQUlDLFNBQUo7SUFDQUMsTUFBTSxDQUFDLFlBQVk7TUFDakJELFNBQVMsR0FBRyxJQUFJRSwwQkFBSixDQUFzQkMsZUFBQSxDQUFFQyxJQUF4QixDQUFaO0lBQ0QsQ0FGSyxDQUFOO0lBR0FDLEVBQUUsQ0FBQywrREFBRCxFQUFrRSxZQUFZO01BQzlFTCxTQUFTLENBQUNNLGtCQUFWLEdBQStCVixPQUEvQjtNQUNBLElBQUlXLGNBQWMsR0FBR1AsU0FBUyxDQUFDUSx3QkFBVixDQUFtQztRQUFDQyxNQUFNLEVBQUU7TUFBVCxDQUFuQyxDQUFyQjtNQUNBRixjQUFjLENBQUNHLE1BQWYsQ0FBc0JDLE1BQXRCLENBQTZCQyxLQUE3QixDQUFtQyxDQUFuQztNQUNBTCxjQUFjLENBQUMsQ0FBRCxDQUFkLENBQWtCSSxNQUFsQixDQUF5QkUsR0FBekIsQ0FBNkI7UUFBQ0MsSUFBSSxFQUFFLFFBQVA7UUFBaUJDLEVBQUUsRUFBRTtNQUFyQixDQUE3QjtJQUNELENBTEMsQ0FBRjtJQU1BVixFQUFFLENBQUMseURBQUQsRUFBNEQsWUFBWTtNQUN4RUwsU0FBUyxDQUFDTSxrQkFBVixHQUErQlYsT0FBL0I7TUFDQSxJQUFJVyxjQUFjLEdBQUdQLFNBQVMsQ0FBQ1Esd0JBQVYsQ0FBbUM7UUFDdERDLE1BQU0sRUFBRSxHQUQ4QztRQUV0RE8sU0FBUyxFQUFFLHNDQUYyQztRQUd0REMsR0FBRyxFQUFFLENBQUMsQ0FIZ0Q7UUFJdERDLEdBQUcsRUFBRUM7TUFKaUQsQ0FBbkMsQ0FBckI7TUFNQVosY0FBYyxDQUFDRyxNQUFmLENBQXNCQyxNQUF0QixDQUE2QkMsS0FBN0IsQ0FBbUMsQ0FBbkM7TUFDQUwsY0FBYyxDQUFDLENBQUQsQ0FBZCxDQUFrQkksTUFBbEIsQ0FBeUJFLEdBQXpCLENBQTZCO1FBQUNDLElBQUksRUFBRSxRQUFQO1FBQWlCQyxFQUFFLEVBQUU7TUFBckIsQ0FBN0I7SUFDRCxDQVZDLENBQUY7SUFXQVYsRUFBRSxDQUFDLG1GQUFELEVBQXNGLFlBQVk7TUFDbEdMLFNBQVMsQ0FBQ00sa0JBQVYsR0FBK0JWLE9BQS9CO01BQ0EsSUFBSSxDQUFDd0IsYUFBRCxFQUFnQkMsZUFBaEIsRUFBaUNDLGVBQWpDLElBQW9EdEIsU0FBUyxDQUFDUSx3QkFBVixDQUFtQztRQUN6RkMsTUFBTSxFQUFFLEdBRGlGO1FBRXpGYyxRQUFRLEVBQUUsR0FGK0U7UUFHekZDLFFBQVEsRUFBRTtNQUgrRSxDQUFuQyxDQUF4RDtNQUtBSixhQUFhLENBQUNULE1BQWQsQ0FBcUJFLEdBQXJCLENBQXlCO1FBQ3ZCQyxJQUFJLEVBQUUsUUFEaUI7UUFFdkJDLEVBQUUsRUFBRTtNQUZtQixDQUF6QjtNQUlBTSxlQUFlLENBQUNWLE1BQWhCLENBQXVCRSxHQUF2QixDQUEyQjtRQUN6QkMsSUFBSSxFQUFFLFdBRG1CO1FBRXpCQyxFQUFFLEVBQUU7TUFGcUIsQ0FBM0I7TUFJQU8sZUFBZSxDQUFDWCxNQUFoQixDQUF1QkUsR0FBdkIsQ0FBMkI7UUFDekJDLElBQUksRUFBRSxVQURtQjtRQUV6QkMsRUFBRSxFQUFFO01BRnFCLENBQTNCO0lBSUQsQ0FuQkMsQ0FBRjtJQW9CQVYsRUFBRSxDQUFDLDZEQUFELEVBQWdFLFlBQVk7TUFDNUVMLFNBQVMsQ0FBQ00sa0JBQVYsR0FBK0JULEdBQS9CO01BQ0EsSUFBSVUsY0FBYyxHQUFHUCxTQUFTLENBQUNRLHdCQUFWLENBQW1DO1FBQ3RETSxJQUFJLEVBQUUsVUFEZ0Q7UUFFdERDLEVBQUUsRUFBRTtNQUZrRCxDQUFuQyxDQUFyQjtNQUlBUixjQUFjLENBQUNHLE1BQWYsQ0FBc0JDLE1BQXRCLENBQTZCQyxLQUE3QixDQUFtQyxDQUFuQztNQUNBTCxjQUFjLENBQUMsQ0FBRCxDQUFkLENBQWtCSSxNQUFsQixDQUF5QkUsR0FBekIsQ0FBNkI7UUFBQ1csUUFBUSxFQUFFO01BQVgsQ0FBN0I7SUFDRCxDQVJDLENBQUY7SUFTQW5CLEVBQUUsQ0FBQyx5REFBRCxFQUE0RCxZQUFZO01BQ3hFTCxTQUFTLENBQUNNLGtCQUFWLEdBQStCLElBQS9CO01BQ0EsSUFBSUMsY0FBYyxHQUFHUCxTQUFTLENBQUNRLHdCQUFWLENBQW1DO1FBQ3RETSxJQUFJLEVBQUUsVUFEZ0Q7UUFFdERDLEVBQUUsRUFBRTtNQUZrRCxDQUFuQyxDQUFyQjtNQUlBUixjQUFjLENBQUNHLE1BQWYsQ0FBc0JDLE1BQXRCLENBQTZCQyxLQUE3QixDQUFtQyxDQUFuQztNQUNBTCxjQUFjLENBQUMsQ0FBRCxDQUFkLENBQWtCSSxNQUFsQixDQUF5QkUsR0FBekIsQ0FBNkI7UUFBQ0MsSUFBSSxFQUFFLFVBQVA7UUFBbUJDLEVBQUUsRUFBRTtNQUF2QixDQUE3QjtJQUNELENBUkMsQ0FBRjtJQVNBVixFQUFFLENBQUMsMkRBQUQsRUFBOEQsWUFBWTtNQUMxRUwsU0FBUyxDQUFDTSxrQkFBVixHQUErQlYsT0FBL0I7TUFDQSxJQUFJVyxjQUFjLEdBQUdQLFNBQVMsQ0FBQ1Esd0JBQVYsQ0FBbUM7UUFDdERNLElBQUksRUFBRSxVQURnRDtRQUV0REMsRUFBRSxFQUFFO01BRmtELENBQW5DLENBQXJCO01BSUFSLGNBQWMsQ0FBQ0csTUFBZixDQUFzQkMsTUFBdEIsQ0FBNkJDLEtBQTdCLENBQW1DLENBQW5DO01BQ0FMLGNBQWMsQ0FBQyxDQUFELENBQWQsQ0FBa0JJLE1BQWxCLENBQXlCRSxHQUF6QixDQUE2QjtRQUFDQyxJQUFJLEVBQUUsVUFBUDtRQUFtQkMsRUFBRSxFQUFFO01BQXZCLENBQTdCO0lBQ0QsQ0FSQyxDQUFGO0VBU0QsQ0FyRU8sQ0FBUjtFQXVFQWhCLFFBQVEsQ0FBQyxVQUFELEVBQWEsWUFBWTtJQUMvQixJQUFJQyxTQUFKO0lBQ0EsSUFBSXlCLFlBQUo7SUFDQXhCLE1BQU0sQ0FBQyxZQUFZO01BQ2pCd0IsWUFBWSxHQUFHLElBQWY7TUFDQXpCLFNBQVMsR0FBRyxJQUFJRSwwQkFBSixDQUFzQixDQUFDd0IsR0FBRCxFQUFNQyxNQUFOLEVBQWNDLElBQWQsS0FBdUI7UUFDdkRILFlBQVksR0FBR0csSUFBZjtNQUNELENBRlcsQ0FBWjtJQUdELENBTEssQ0FBTjtJQU1BQyxVQUFVLENBQUMsWUFBWTtNQUNyQkosWUFBWSxHQUFHLEVBQWY7SUFDRCxDQUZTLENBQVY7SUFJQXBCLEVBQUUsQ0FBQyx1Q0FBRCxFQUEwQyxrQkFBa0I7TUFDNUQsTUFBTUwsU0FBUyxDQUFDOEIsYUFBVixDQUF3QixFQUF4QixFQUE0QixFQUE1QixFQUFnQztRQUNwQ0MsSUFBSSxFQUFFO01BRDhCLENBQWhDLENBQU47TUFHQU4sWUFBWSxDQUFDZCxNQUFiLENBQW9CRSxHQUFwQixDQUF3QjtRQUN0QmtCLElBQUksRUFBRSxLQURnQjtRQUV0QkMsS0FBSyxFQUFFLENBQUMsR0FBRCxFQUFNLEdBQU4sRUFBVyxHQUFYO01BRmUsQ0FBeEI7SUFJRCxDQVJDLENBQUY7SUFTQTNCLEVBQUUsQ0FBQyxzQ0FBRCxFQUF5QyxrQkFBa0I7TUFDM0QsTUFBTUwsU0FBUyxDQUFDOEIsYUFBVixDQUF3QixFQUF4QixFQUE0QixFQUE1QixFQUFnQztRQUNwQ0UsS0FBSyxFQUFFLENBQUMsR0FBRCxFQUFNLEdBQU4sRUFBVyxHQUFYO01BRDZCLENBQWhDLENBQU47TUFHQVAsWUFBWSxDQUFDZCxNQUFiLENBQW9CRSxHQUFwQixDQUF3QjtRQUN0QmtCLElBQUksRUFBRSxLQURnQjtRQUV0QkMsS0FBSyxFQUFFLENBQUMsR0FBRCxFQUFNLEdBQU4sRUFBVyxHQUFYO01BRmUsQ0FBeEI7SUFJRCxDQVJDLENBQUY7SUFTQTNCLEVBQUUsQ0FBQyw0RUFBRCxFQUErRSxrQkFBa0I7TUFDakcsTUFBTUwsU0FBUyxDQUFDOEIsYUFBVixDQUF3QixFQUF4QixFQUE0QixFQUE1QixFQUFnQztRQUNwQ0MsSUFBSSxFQUFFLEtBRDhCO1FBRXBDQyxLQUFLLEVBQUUsQ0FBQyxHQUFELEVBQU0sR0FBTixFQUFXLEdBQVg7TUFGNkIsQ0FBaEMsQ0FBTjtNQUlBUCxZQUFZLENBQUNkLE1BQWIsQ0FBb0JFLEdBQXBCLENBQXdCO1FBQ3RCa0IsSUFBSSxFQUFFLEtBRGdCO1FBRXRCQyxLQUFLLEVBQUUsQ0FBQyxHQUFELEVBQU0sR0FBTixFQUFXLEdBQVg7TUFGZSxDQUF4QjtJQUlELENBVEMsQ0FBRjtFQVVELENBekNPLENBQVI7RUEwQ0FqQyxRQUFRLENBQUMsYUFBRCxFQUFnQixZQUFZO0lBQ2xDLElBQUlrQyxlQUFKLEVBQXFCQyxZQUFyQjtJQUNBakMsTUFBTSxDQUFDLFlBQVk7TUFDakIsS0FBSyxJQUFJa0MsT0FBVCxJQUFvQkMseUNBQXBCLEVBQTRDO1FBQzFDLElBQUlELE9BQU8sQ0FBQ0UsWUFBUixDQUFxQkMsUUFBckIsQ0FBOEIsYUFBOUIsQ0FBSixFQUFrRDtVQUNoREwsZUFBZSxHQUFHRSxPQUFPLENBQUNGLGVBQTFCO1VBQ0FDLFlBQVksR0FBR0MsT0FBTyxDQUFDRCxZQUF2QjtRQUNEO01BQ0Y7SUFDRixDQVBLLENBQU47SUFRQTdCLEVBQUUsQ0FBQyxzREFBRCxFQUF5RCxZQUFZO01BQ3JFNEIsZUFBZSxDQUFDLHlDQUFELENBQWYsQ0FBMkR0QixNQUEzRCxDQUFrRUMsS0FBbEUsQ0FDRSwwQ0FERjtJQUdELENBSkMsQ0FBRjtJQUtBUCxFQUFFLENBQUMsc0VBQUQsRUFBeUUsWUFBWTtNQUNyRjRCLGVBQWUsQ0FBQyxnREFBRCxDQUFmLENBQWtFdEIsTUFBbEUsQ0FBeUVDLEtBQXpFLENBQ0UsaURBREY7SUFHRCxDQUpDLENBQUY7SUFLQVAsRUFBRSxDQUFDLHVDQUFELEVBQTBDLFlBQVk7TUFDdEQ2QixZQUFZLENBQUMsNkNBQUQsQ0FBWixDQUE0RHZCLE1BQTVELENBQW1FQyxLQUFuRSxDQUNFLDZDQURGO01BR0FzQixZQUFZLENBQUMsNENBQUQsQ0FBWixDQUEyRHZCLE1BQTNELENBQWtFQyxLQUFsRSxDQUNFLDRDQURGO0lBR0QsQ0FQQyxDQUFGO0VBUUQsQ0E1Qk8sQ0FBUjtBQTZCRCxDQS9JTyxDQUFSIn0=