"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

function resFixture(url, method) {
  if (/\/status$/.test(url)) {
    return [200, {
      status: 0,
      value: {
        foo: 'bar'
      }
    }];
  }

  if (/\/element\/bad\/text$/.test(url)) {
    return [500, {
      status: 11,
      value: {
        message: 'Invisible element'
      }
    }];
  }

  if (/\/element\/200\/text$/.test(url)) {
    return [200, {
      status: 11,
      value: {
        message: 'Invisible element'
      }
    }];
  }

  if (/\/element\/200\/value$/.test(url)) {
    return [200, {
      status: 0,
      sessionId: 'innersessionid',
      value: 'foobar'
    }];
  }

  if (/\/session$/.test(url) && method === 'POST') {
    return [200, {
      status: 0,
      sessionId: '123',
      value: {
        browserName: 'boo'
      }
    }];
  }

  if (/\/nochrome$/.test(url)) {
    return [100, {
      status: 0,
      value: {
        message: 'chrome not reachable'
      }
    }];
  }

  throw new Error("Can't handle url " + url);
}

async function request(opts) {
  const {
    url,
    method,
    json
  } = opts;

  if (/badurl$/.test(url)) {
    throw new Error('noworky');
  }

  const [status, data] = resFixture(url, method, json);
  return {
    status,
    headers: {
      'content-type': 'application/json; charset=utf-8'
    },
    data
  };
}

var _default = request;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXNGaXh0dXJlIiwidXJsIiwibWV0aG9kIiwidGVzdCIsInN0YXR1cyIsInZhbHVlIiwiZm9vIiwibWVzc2FnZSIsInNlc3Npb25JZCIsImJyb3dzZXJOYW1lIiwiRXJyb3IiLCJyZXF1ZXN0Iiwib3B0cyIsImpzb24iLCJkYXRhIiwiaGVhZGVycyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Rlc3QvdW5pdC9qc29ud3AtcHJveHkvbW9jay1yZXF1ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHJlc0ZpeHR1cmUodXJsLCBtZXRob2QpIHtcbiAgaWYgKC9cXC9zdGF0dXMkLy50ZXN0KHVybCkpIHtcbiAgICByZXR1cm4gWzIwMCwge3N0YXR1czogMCwgdmFsdWU6IHtmb286ICdiYXInfX1dO1xuICB9XG4gIGlmICgvXFwvZWxlbWVudFxcL2JhZFxcL3RleHQkLy50ZXN0KHVybCkpIHtcbiAgICByZXR1cm4gWzUwMCwge3N0YXR1czogMTEsIHZhbHVlOiB7bWVzc2FnZTogJ0ludmlzaWJsZSBlbGVtZW50J319XTtcbiAgfVxuICBpZiAoL1xcL2VsZW1lbnRcXC8yMDBcXC90ZXh0JC8udGVzdCh1cmwpKSB7XG4gICAgcmV0dXJuIFsyMDAsIHtzdGF0dXM6IDExLCB2YWx1ZToge21lc3NhZ2U6ICdJbnZpc2libGUgZWxlbWVudCd9fV07XG4gIH1cbiAgaWYgKC9cXC9lbGVtZW50XFwvMjAwXFwvdmFsdWUkLy50ZXN0KHVybCkpIHtcbiAgICByZXR1cm4gWzIwMCwge3N0YXR1czogMCwgc2Vzc2lvbklkOiAnaW5uZXJzZXNzaW9uaWQnLCB2YWx1ZTogJ2Zvb2Jhcid9XTtcbiAgfVxuICBpZiAoL1xcL3Nlc3Npb24kLy50ZXN0KHVybCkgJiYgbWV0aG9kID09PSAnUE9TVCcpIHtcbiAgICByZXR1cm4gWzIwMCwge3N0YXR1czogMCwgc2Vzc2lvbklkOiAnMTIzJywgdmFsdWU6IHticm93c2VyTmFtZTogJ2Jvbyd9fV07XG4gIH1cbiAgaWYgKC9cXC9ub2Nocm9tZSQvLnRlc3QodXJsKSkge1xuICAgIHJldHVybiBbMTAwLCB7c3RhdHVzOiAwLCB2YWx1ZToge21lc3NhZ2U6ICdjaHJvbWUgbm90IHJlYWNoYWJsZSd9fV07XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3QgaGFuZGxlIHVybCBcIiArIHVybCk7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZXF1aXJlLWF3YWl0XG5hc3luYyBmdW5jdGlvbiByZXF1ZXN0KG9wdHMpIHtcbiAgY29uc3Qge3VybCwgbWV0aG9kLCBqc29ufSA9IG9wdHM7XG4gIGlmICgvYmFkdXJsJC8udGVzdCh1cmwpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdub3dvcmt5Jyk7XG4gIH1cblxuICBjb25zdCBbc3RhdHVzLCBkYXRhXSA9IHJlc0ZpeHR1cmUodXJsLCBtZXRob2QsIGpzb24pO1xuICByZXR1cm4ge1xuICAgIHN0YXR1cyxcbiAgICBoZWFkZXJzOiB7J2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04J30sXG4gICAgZGF0YSxcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVxdWVzdDtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsU0FBU0EsVUFBVCxDQUFvQkMsR0FBcEIsRUFBeUJDLE1BQXpCLEVBQWlDO0VBQy9CLElBQUksWUFBWUMsSUFBWixDQUFpQkYsR0FBakIsQ0FBSixFQUEyQjtJQUN6QixPQUFPLENBQUMsR0FBRCxFQUFNO01BQUNHLE1BQU0sRUFBRSxDQUFUO01BQVlDLEtBQUssRUFBRTtRQUFDQyxHQUFHLEVBQUU7TUFBTjtJQUFuQixDQUFOLENBQVA7RUFDRDs7RUFDRCxJQUFJLHdCQUF3QkgsSUFBeEIsQ0FBNkJGLEdBQTdCLENBQUosRUFBdUM7SUFDckMsT0FBTyxDQUFDLEdBQUQsRUFBTTtNQUFDRyxNQUFNLEVBQUUsRUFBVDtNQUFhQyxLQUFLLEVBQUU7UUFBQ0UsT0FBTyxFQUFFO01BQVY7SUFBcEIsQ0FBTixDQUFQO0VBQ0Q7O0VBQ0QsSUFBSSx3QkFBd0JKLElBQXhCLENBQTZCRixHQUE3QixDQUFKLEVBQXVDO0lBQ3JDLE9BQU8sQ0FBQyxHQUFELEVBQU07TUFBQ0csTUFBTSxFQUFFLEVBQVQ7TUFBYUMsS0FBSyxFQUFFO1FBQUNFLE9BQU8sRUFBRTtNQUFWO0lBQXBCLENBQU4sQ0FBUDtFQUNEOztFQUNELElBQUkseUJBQXlCSixJQUF6QixDQUE4QkYsR0FBOUIsQ0FBSixFQUF3QztJQUN0QyxPQUFPLENBQUMsR0FBRCxFQUFNO01BQUNHLE1BQU0sRUFBRSxDQUFUO01BQVlJLFNBQVMsRUFBRSxnQkFBdkI7TUFBeUNILEtBQUssRUFBRTtJQUFoRCxDQUFOLENBQVA7RUFDRDs7RUFDRCxJQUFJLGFBQWFGLElBQWIsQ0FBa0JGLEdBQWxCLEtBQTBCQyxNQUFNLEtBQUssTUFBekMsRUFBaUQ7SUFDL0MsT0FBTyxDQUFDLEdBQUQsRUFBTTtNQUFDRSxNQUFNLEVBQUUsQ0FBVDtNQUFZSSxTQUFTLEVBQUUsS0FBdkI7TUFBOEJILEtBQUssRUFBRTtRQUFDSSxXQUFXLEVBQUU7TUFBZDtJQUFyQyxDQUFOLENBQVA7RUFDRDs7RUFDRCxJQUFJLGNBQWNOLElBQWQsQ0FBbUJGLEdBQW5CLENBQUosRUFBNkI7SUFDM0IsT0FBTyxDQUFDLEdBQUQsRUFBTTtNQUFDRyxNQUFNLEVBQUUsQ0FBVDtNQUFZQyxLQUFLLEVBQUU7UUFBQ0UsT0FBTyxFQUFFO01BQVY7SUFBbkIsQ0FBTixDQUFQO0VBQ0Q7O0VBQ0QsTUFBTSxJQUFJRyxLQUFKLENBQVUsc0JBQXNCVCxHQUFoQyxDQUFOO0FBQ0Q7O0FBR0QsZUFBZVUsT0FBZixDQUF1QkMsSUFBdkIsRUFBNkI7RUFDM0IsTUFBTTtJQUFDWCxHQUFEO0lBQU1DLE1BQU47SUFBY1c7RUFBZCxJQUFzQkQsSUFBNUI7O0VBQ0EsSUFBSSxVQUFVVCxJQUFWLENBQWVGLEdBQWYsQ0FBSixFQUF5QjtJQUN2QixNQUFNLElBQUlTLEtBQUosQ0FBVSxTQUFWLENBQU47RUFDRDs7RUFFRCxNQUFNLENBQUNOLE1BQUQsRUFBU1UsSUFBVCxJQUFpQmQsVUFBVSxDQUFDQyxHQUFELEVBQU1DLE1BQU4sRUFBY1csSUFBZCxDQUFqQztFQUNBLE9BQU87SUFDTFQsTUFESztJQUVMVyxPQUFPLEVBQUU7TUFBQyxnQkFBZ0I7SUFBakIsQ0FGSjtJQUdMRDtFQUhLLENBQVA7QUFLRDs7ZUFFY0gsTyJ9