"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _support = require("@appium/support");

var _helpers = require("../../../lib/basedriver/helpers");

var _sinon = _interopRequireDefault(require("sinon"));

describe('helpers', function () {
  describe('#isPackageOrBundle', function () {
    it('should accept packages and bundles', function () {
      (0, _helpers.isPackageOrBundle)('io.appium.testapp').should.be.true;
    });
    it('should not accept non-packages or non-bundles', function () {
      (0, _helpers.isPackageOrBundle)('foo').should.be.false;
      (0, _helpers.isPackageOrBundle)('/path/to/an.app').should.be.false;
      (0, _helpers.isPackageOrBundle)('/path/to/an.apk').should.be.false;
    });
  });
  describe('#duplicateKeys', function () {
    it('should translate key in an object', function () {
      (0, _helpers.duplicateKeys)({
        foo: 'hello world'
      }, 'foo', 'bar').should.eql({
        foo: 'hello world',
        bar: 'hello world'
      });
    });
    it('should translate key in an object within an object', function () {
      (0, _helpers.duplicateKeys)({
        key: {
          foo: 'hello world'
        }
      }, 'foo', 'bar').should.eql({
        key: {
          foo: 'hello world',
          bar: 'hello world'
        }
      });
    });
    it('should translate key in an object with an array', function () {
      (0, _helpers.duplicateKeys)([{
        key: {
          foo: 'hello world'
        }
      }, {
        foo: 'HELLO WORLD'
      }], 'foo', 'bar').should.eql([{
        key: {
          foo: 'hello world',
          bar: 'hello world'
        }
      }, {
        foo: 'HELLO WORLD',
        bar: 'HELLO WORLD'
      }]);
    });
    it('should duplicate both keys', function () {
      (0, _helpers.duplicateKeys)({
        keyOne: {
          foo: 'hello world'
        },
        keyTwo: {
          bar: 'HELLO WORLD'
        }
      }, 'foo', 'bar').should.eql({
        keyOne: {
          foo: 'hello world',
          bar: 'hello world'
        },
        keyTwo: {
          bar: 'HELLO WORLD',
          foo: 'HELLO WORLD'
        }
      });
    });
    it('should not do anything to primitives', function () {
      [0, 1, -1, true, false, null, undefined, '', 'Hello World'].forEach(item => {
        should.equal((0, _helpers.duplicateKeys)(item), item);
      });
    });
    it('should rename keys on big complex objects', function () {
      const input = [{
        foo: 'bar'
      }, {
        hello: {
          world: {
            foo: 'BAR'
          }
        },
        foo: 'bahr'
      }, 'foo', null, 0];
      const expectedOutput = [{
        foo: 'bar',
        FOO: 'bar'
      }, {
        hello: {
          world: {
            foo: 'BAR',
            FOO: 'BAR'
          }
        },
        foo: 'bahr',
        FOO: 'bahr'
      }, 'foo', null, 0];
      (0, _helpers.duplicateKeys)(input, 'foo', 'FOO').should.deep.equal(expectedOutput);
    });
  });
  describe('#configureApp', function () {
    let sandbox;
    beforeEach(function () {
      sandbox = _sinon.default.createSandbox();
      sandbox.stub(_support.zip, 'extractAllTo').resolves();
      sandbox.stub(_support.zip, 'assertValidZip').resolves();
      sandbox.stub(_support.fs, 'mv').resolves();
      sandbox.stub(_support.fs, 'stat').resolves({
        isFile: () => true,
        isDirectory: () => false
      });
      sandbox.stub(_support.fs, 'exists').resolves(true);
      sandbox.stub(_support.fs, 'hash').resolves('0xDEADBEEF');
      sandbox.stub(_support.fs, 'glob').resolves(['/path/to/an.apk']);
      sandbox.stub(_support.fs, 'rimraf').resolves();
      sandbox.stub(_support.tempDir, 'openDir').resolves('/some/dir');
    });
    afterEach(function () {
      sandbox.restore();
    });
    it('should pass "useSystemUnzip" flag through to @appium/support', async function () {
      await (0, _helpers.configureApp)('/path/to/an.apk.zip', '.apk');
      _support.zip.extractAllTo.getCall(0).lastArg.useSystemUnzip.should.be.true;
    });
  });
});
describe('parseCapsArray', function () {
  it('should parse string into array', function () {
    (0, _helpers.parseCapsArray)('/tmp/my/app.zip').should.eql(['/tmp/my/app.zip']);
  });
  it('should parse array as string into array', function () {
    (0, _helpers.parseCapsArray)('["/tmp/my/app.zip"]').should.eql(['/tmp/my/app.zip']);
    (0, _helpers.parseCapsArray)('["/tmp/my/app.zip","/tmp/my/app2.zip"]').should.eql(['/tmp/my/app.zip', '/tmp/my/app2.zip']);
  });
  it('should return an array without change', function () {
    (0, _helpers.parseCapsArray)(['a', 'b']).should.eql(['a', 'b']);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,